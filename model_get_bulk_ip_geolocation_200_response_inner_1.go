/*
IPGeolocation.io - IP intelligence products

Ipgeolocation provides a set of APIs to make ip based decisions.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipgeolocationsdk

import (
	"encoding/json"
	"fmt"
)

// GetBulkIpGeolocation200ResponseInner1 - struct for GetBulkIpGeolocation200ResponseInner1
type GetBulkIpGeolocation200ResponseInner1 struct {
	ErrorXMLResponseArray *ErrorXMLResponseArray
	GeolocationXMLResponseArray *GeolocationXMLResponseArray
}

// ErrorXMLResponseArrayAsGetBulkIpGeolocation200ResponseInner1 is a convenience function that returns ErrorXMLResponseArray wrapped in GetBulkIpGeolocation200ResponseInner1
func ErrorXMLResponseArrayAsGetBulkIpGeolocation200ResponseInner1(v *ErrorXMLResponseArray) GetBulkIpGeolocation200ResponseInner1 {
	return GetBulkIpGeolocation200ResponseInner1{
		ErrorXMLResponseArray: v,
	}
}

// GeolocationXMLResponseArrayAsGetBulkIpGeolocation200ResponseInner1 is a convenience function that returns GeolocationXMLResponseArray wrapped in GetBulkIpGeolocation200ResponseInner1
func GeolocationXMLResponseArrayAsGetBulkIpGeolocation200ResponseInner1(v *GeolocationXMLResponseArray) GetBulkIpGeolocation200ResponseInner1 {
	return GetBulkIpGeolocation200ResponseInner1{
		GeolocationXMLResponseArray: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetBulkIpGeolocation200ResponseInner1) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ErrorXMLResponseArray
	err = json.Unmarshal(data, &dst.ErrorXMLResponseArray)
	if err == nil {
		jsonErrorXMLResponseArray, _ := json.Marshal(dst.ErrorXMLResponseArray)
		if string(jsonErrorXMLResponseArray) == "{}" { // empty struct
			dst.ErrorXMLResponseArray = nil
		} else {
			match++
		}
	} else {
		dst.ErrorXMLResponseArray = nil
	}

	// try to unmarshal data into GeolocationXMLResponseArray
	err = json.Unmarshal(data, &dst.GeolocationXMLResponseArray)
	if err == nil {
		jsonGeolocationXMLResponseArray, _ := json.Marshal(dst.GeolocationXMLResponseArray)
		if string(jsonGeolocationXMLResponseArray) == "{}" { // empty struct
			dst.GeolocationXMLResponseArray = nil
		} else {
			match++
		}
	} else {
		dst.GeolocationXMLResponseArray = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ErrorXMLResponseArray = nil
		dst.GeolocationXMLResponseArray = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetBulkIpGeolocation200ResponseInner1)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetBulkIpGeolocation200ResponseInner1)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetBulkIpGeolocation200ResponseInner1) MarshalJSON() ([]byte, error) {
	if src.ErrorXMLResponseArray != nil {
		return json.Marshal(&src.ErrorXMLResponseArray)
	}

	if src.GeolocationXMLResponseArray != nil {
		return json.Marshal(&src.GeolocationXMLResponseArray)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetBulkIpGeolocation200ResponseInner1) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ErrorXMLResponseArray != nil {
		return obj.ErrorXMLResponseArray
	}

	if obj.GeolocationXMLResponseArray != nil {
		return obj.GeolocationXMLResponseArray
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj GetBulkIpGeolocation200ResponseInner1) GetActualInstanceValue() (interface{}) {
	if obj.ErrorXMLResponseArray != nil {
		return *obj.ErrorXMLResponseArray
	}

	if obj.GeolocationXMLResponseArray != nil {
		return *obj.GeolocationXMLResponseArray
	}

	// all schemas are nil
	return nil
}

type NullableGetBulkIpGeolocation200ResponseInner1 struct {
	value *GetBulkIpGeolocation200ResponseInner1
	isSet bool
}

func (v NullableGetBulkIpGeolocation200ResponseInner1) Get() *GetBulkIpGeolocation200ResponseInner1 {
	return v.value
}

func (v *NullableGetBulkIpGeolocation200ResponseInner1) Set(val *GetBulkIpGeolocation200ResponseInner1) {
	v.value = val
	v.isSet = true
}

func (v NullableGetBulkIpGeolocation200ResponseInner1) IsSet() bool {
	return v.isSet
}

func (v *NullableGetBulkIpGeolocation200ResponseInner1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetBulkIpGeolocation200ResponseInner1(val *GetBulkIpGeolocation200ResponseInner1) *NullableGetBulkIpGeolocation200ResponseInner1 {
	return &NullableGetBulkIpGeolocation200ResponseInner1{value: val, isSet: true}
}

func (v NullableGetBulkIpGeolocation200ResponseInner1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetBulkIpGeolocation200ResponseInner1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


