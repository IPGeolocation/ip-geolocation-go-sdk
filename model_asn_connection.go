/*
IPGeolocation.io - IP intelligence products

Ipgeolocation provides a set of APIs to make ip based decisions.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipgeolocationsdk

import (
	"encoding/json"
)

// checks if the ASNConnection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ASNConnection{}

// ASNConnection struct for ASNConnection
type ASNConnection struct {
	AsNumber *string `json:"as_number,omitempty"`
	Description *string `json:"description,omitempty"`
	Country *string `json:"country,omitempty"`
}

// NewASNConnection instantiates a new ASNConnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewASNConnection() *ASNConnection {
	this := ASNConnection{}
	return &this
}

// NewASNConnectionWithDefaults instantiates a new ASNConnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewASNConnectionWithDefaults() *ASNConnection {
	this := ASNConnection{}
	return &this
}

// GetAsNumber returns the AsNumber field value if set, zero value otherwise.
func (o *ASNConnection) GetAsNumber() string {
	if o == nil || IsNil(o.AsNumber) {
		var ret string
		return ret
	}
	return *o.AsNumber
}

// GetAsNumberOk returns a tuple with the AsNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASNConnection) GetAsNumberOk() (*string, bool) {
	if o == nil || IsNil(o.AsNumber) {
		return nil, false
	}
	return o.AsNumber, true
}

// HasAsNumber returns a boolean if a field has been set.
func (o *ASNConnection) HasAsNumber() bool {
	if o != nil && !IsNil(o.AsNumber) {
		return true
	}

	return false
}

// SetAsNumber gets a reference to the given string and assigns it to the AsNumber field.
func (o *ASNConnection) SetAsNumber(v string) {
	o.AsNumber = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ASNConnection) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASNConnection) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ASNConnection) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ASNConnection) SetDescription(v string) {
	o.Description = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *ASNConnection) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASNConnection) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *ASNConnection) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *ASNConnection) SetCountry(v string) {
	o.Country = &v
}

func (o ASNConnection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ASNConnection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AsNumber) {
		toSerialize["as_number"] = o.AsNumber
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	return toSerialize, nil
}

type NullableASNConnection struct {
	value *ASNConnection
	isSet bool
}

func (v NullableASNConnection) Get() *ASNConnection {
	return v.value
}

func (v *NullableASNConnection) Set(val *ASNConnection) {
	v.value = val
	v.isSet = true
}

func (v NullableASNConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableASNConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableASNConnection(val *ASNConnection) *NullableASNConnection {
	return &NullableASNConnection{value: val, isSet: true}
}

func (v NullableASNConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableASNConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


