/*
IPGeolocation.io - IP intelligence products

Ipgeolocation provides a set of APIs to make ip based decisions.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipgeolocationsdk

import (
	"encoding/json"
)

// checks if the TimeZoneDstStart type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimeZoneDstStart{}

// TimeZoneDstStart struct for TimeZoneDstStart
type TimeZoneDstStart struct {
	UtcTime *string `json:"utc_time,omitempty"`
	Duration *string `json:"duration,omitempty"`
	Gap *bool `json:"gap,omitempty"`
	DateTimeAfter *string `json:"date_time_after,omitempty"`
	DateTimeBefore *string `json:"date_time_before,omitempty"`
	Overlap *bool `json:"overlap,omitempty"`
}

// NewTimeZoneDstStart instantiates a new TimeZoneDstStart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeZoneDstStart() *TimeZoneDstStart {
	this := TimeZoneDstStart{}
	return &this
}

// NewTimeZoneDstStartWithDefaults instantiates a new TimeZoneDstStart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeZoneDstStartWithDefaults() *TimeZoneDstStart {
	this := TimeZoneDstStart{}
	return &this
}

// GetUtcTime returns the UtcTime field value if set, zero value otherwise.
func (o *TimeZoneDstStart) GetUtcTime() string {
	if o == nil || IsNil(o.UtcTime) {
		var ret string
		return ret
	}
	return *o.UtcTime
}

// GetUtcTimeOk returns a tuple with the UtcTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeZoneDstStart) GetUtcTimeOk() (*string, bool) {
	if o == nil || IsNil(o.UtcTime) {
		return nil, false
	}
	return o.UtcTime, true
}

// HasUtcTime returns a boolean if a field has been set.
func (o *TimeZoneDstStart) HasUtcTime() bool {
	if o != nil && !IsNil(o.UtcTime) {
		return true
	}

	return false
}

// SetUtcTime gets a reference to the given string and assigns it to the UtcTime field.
func (o *TimeZoneDstStart) SetUtcTime(v string) {
	o.UtcTime = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *TimeZoneDstStart) GetDuration() string {
	if o == nil || IsNil(o.Duration) {
		var ret string
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeZoneDstStart) GetDurationOk() (*string, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *TimeZoneDstStart) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given string and assigns it to the Duration field.
func (o *TimeZoneDstStart) SetDuration(v string) {
	o.Duration = &v
}

// GetGap returns the Gap field value if set, zero value otherwise.
func (o *TimeZoneDstStart) GetGap() bool {
	if o == nil || IsNil(o.Gap) {
		var ret bool
		return ret
	}
	return *o.Gap
}

// GetGapOk returns a tuple with the Gap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeZoneDstStart) GetGapOk() (*bool, bool) {
	if o == nil || IsNil(o.Gap) {
		return nil, false
	}
	return o.Gap, true
}

// HasGap returns a boolean if a field has been set.
func (o *TimeZoneDstStart) HasGap() bool {
	if o != nil && !IsNil(o.Gap) {
		return true
	}

	return false
}

// SetGap gets a reference to the given bool and assigns it to the Gap field.
func (o *TimeZoneDstStart) SetGap(v bool) {
	o.Gap = &v
}

// GetDateTimeAfter returns the DateTimeAfter field value if set, zero value otherwise.
func (o *TimeZoneDstStart) GetDateTimeAfter() string {
	if o == nil || IsNil(o.DateTimeAfter) {
		var ret string
		return ret
	}
	return *o.DateTimeAfter
}

// GetDateTimeAfterOk returns a tuple with the DateTimeAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeZoneDstStart) GetDateTimeAfterOk() (*string, bool) {
	if o == nil || IsNil(o.DateTimeAfter) {
		return nil, false
	}
	return o.DateTimeAfter, true
}

// HasDateTimeAfter returns a boolean if a field has been set.
func (o *TimeZoneDstStart) HasDateTimeAfter() bool {
	if o != nil && !IsNil(o.DateTimeAfter) {
		return true
	}

	return false
}

// SetDateTimeAfter gets a reference to the given string and assigns it to the DateTimeAfter field.
func (o *TimeZoneDstStart) SetDateTimeAfter(v string) {
	o.DateTimeAfter = &v
}

// GetDateTimeBefore returns the DateTimeBefore field value if set, zero value otherwise.
func (o *TimeZoneDstStart) GetDateTimeBefore() string {
	if o == nil || IsNil(o.DateTimeBefore) {
		var ret string
		return ret
	}
	return *o.DateTimeBefore
}

// GetDateTimeBeforeOk returns a tuple with the DateTimeBefore field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeZoneDstStart) GetDateTimeBeforeOk() (*string, bool) {
	if o == nil || IsNil(o.DateTimeBefore) {
		return nil, false
	}
	return o.DateTimeBefore, true
}

// HasDateTimeBefore returns a boolean if a field has been set.
func (o *TimeZoneDstStart) HasDateTimeBefore() bool {
	if o != nil && !IsNil(o.DateTimeBefore) {
		return true
	}

	return false
}

// SetDateTimeBefore gets a reference to the given string and assigns it to the DateTimeBefore field.
func (o *TimeZoneDstStart) SetDateTimeBefore(v string) {
	o.DateTimeBefore = &v
}

// GetOverlap returns the Overlap field value if set, zero value otherwise.
func (o *TimeZoneDstStart) GetOverlap() bool {
	if o == nil || IsNil(o.Overlap) {
		var ret bool
		return ret
	}
	return *o.Overlap
}

// GetOverlapOk returns a tuple with the Overlap field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeZoneDstStart) GetOverlapOk() (*bool, bool) {
	if o == nil || IsNil(o.Overlap) {
		return nil, false
	}
	return o.Overlap, true
}

// HasOverlap returns a boolean if a field has been set.
func (o *TimeZoneDstStart) HasOverlap() bool {
	if o != nil && !IsNil(o.Overlap) {
		return true
	}

	return false
}

// SetOverlap gets a reference to the given bool and assigns it to the Overlap field.
func (o *TimeZoneDstStart) SetOverlap(v bool) {
	o.Overlap = &v
}

func (o TimeZoneDstStart) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimeZoneDstStart) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UtcTime) {
		toSerialize["utc_time"] = o.UtcTime
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.Gap) {
		toSerialize["gap"] = o.Gap
	}
	if !IsNil(o.DateTimeAfter) {
		toSerialize["date_time_after"] = o.DateTimeAfter
	}
	if !IsNil(o.DateTimeBefore) {
		toSerialize["date_time_before"] = o.DateTimeBefore
	}
	if !IsNil(o.Overlap) {
		toSerialize["overlap"] = o.Overlap
	}
	return toSerialize, nil
}

type NullableTimeZoneDstStart struct {
	value *TimeZoneDstStart
	isSet bool
}

func (v NullableTimeZoneDstStart) Get() *TimeZoneDstStart {
	return v.value
}

func (v *NullableTimeZoneDstStart) Set(val *TimeZoneDstStart) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeZoneDstStart) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeZoneDstStart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeZoneDstStart(val *TimeZoneDstStart) *NullableTimeZoneDstStart {
	return &NullableTimeZoneDstStart{value: val, isSet: true}
}

func (v NullableTimeZoneDstStart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeZoneDstStart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


