/*
IPGeolocation.io - IP intelligence products

Ipgeolocation provides a set of APIs to make ip based decisions.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipgeolocationsdk

import (
	"encoding/json"
)

// checks if the UserAgentXMLDataArray type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserAgentXMLDataArray{}

// UserAgentXMLDataArray struct for UserAgentXMLDataArray
type UserAgentXMLDataArray struct {
	UserAgentString *string `json:"user_agent_string,omitempty"`
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
	Version *string `json:"version,omitempty"`
	VersionMajor *string `json:"version_major,omitempty"`
	Device *UserAgentDataDevice `json:"device,omitempty"`
	Engine *UserAgentDataEngine `json:"engine,omitempty"`
	OperatingSystem *UserAgentDataOperatingSystem `json:"operating_system,omitempty"`
}

// NewUserAgentXMLDataArray instantiates a new UserAgentXMLDataArray object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserAgentXMLDataArray() *UserAgentXMLDataArray {
	this := UserAgentXMLDataArray{}
	return &this
}

// NewUserAgentXMLDataArrayWithDefaults instantiates a new UserAgentXMLDataArray object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserAgentXMLDataArrayWithDefaults() *UserAgentXMLDataArray {
	this := UserAgentXMLDataArray{}
	return &this
}

// GetUserAgentString returns the UserAgentString field value if set, zero value otherwise.
func (o *UserAgentXMLDataArray) GetUserAgentString() string {
	if o == nil || IsNil(o.UserAgentString) {
		var ret string
		return ret
	}
	return *o.UserAgentString
}

// GetUserAgentStringOk returns a tuple with the UserAgentString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAgentXMLDataArray) GetUserAgentStringOk() (*string, bool) {
	if o == nil || IsNil(o.UserAgentString) {
		return nil, false
	}
	return o.UserAgentString, true
}

// HasUserAgentString returns a boolean if a field has been set.
func (o *UserAgentXMLDataArray) HasUserAgentString() bool {
	if o != nil && !IsNil(o.UserAgentString) {
		return true
	}

	return false
}

// SetUserAgentString gets a reference to the given string and assigns it to the UserAgentString field.
func (o *UserAgentXMLDataArray) SetUserAgentString(v string) {
	o.UserAgentString = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UserAgentXMLDataArray) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAgentXMLDataArray) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UserAgentXMLDataArray) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UserAgentXMLDataArray) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UserAgentXMLDataArray) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAgentXMLDataArray) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UserAgentXMLDataArray) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UserAgentXMLDataArray) SetType(v string) {
	o.Type = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *UserAgentXMLDataArray) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAgentXMLDataArray) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *UserAgentXMLDataArray) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *UserAgentXMLDataArray) SetVersion(v string) {
	o.Version = &v
}

// GetVersionMajor returns the VersionMajor field value if set, zero value otherwise.
func (o *UserAgentXMLDataArray) GetVersionMajor() string {
	if o == nil || IsNil(o.VersionMajor) {
		var ret string
		return ret
	}
	return *o.VersionMajor
}

// GetVersionMajorOk returns a tuple with the VersionMajor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAgentXMLDataArray) GetVersionMajorOk() (*string, bool) {
	if o == nil || IsNil(o.VersionMajor) {
		return nil, false
	}
	return o.VersionMajor, true
}

// HasVersionMajor returns a boolean if a field has been set.
func (o *UserAgentXMLDataArray) HasVersionMajor() bool {
	if o != nil && !IsNil(o.VersionMajor) {
		return true
	}

	return false
}

// SetVersionMajor gets a reference to the given string and assigns it to the VersionMajor field.
func (o *UserAgentXMLDataArray) SetVersionMajor(v string) {
	o.VersionMajor = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *UserAgentXMLDataArray) GetDevice() UserAgentDataDevice {
	if o == nil || IsNil(o.Device) {
		var ret UserAgentDataDevice
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAgentXMLDataArray) GetDeviceOk() (*UserAgentDataDevice, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *UserAgentXMLDataArray) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given UserAgentDataDevice and assigns it to the Device field.
func (o *UserAgentXMLDataArray) SetDevice(v UserAgentDataDevice) {
	o.Device = &v
}

// GetEngine returns the Engine field value if set, zero value otherwise.
func (o *UserAgentXMLDataArray) GetEngine() UserAgentDataEngine {
	if o == nil || IsNil(o.Engine) {
		var ret UserAgentDataEngine
		return ret
	}
	return *o.Engine
}

// GetEngineOk returns a tuple with the Engine field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAgentXMLDataArray) GetEngineOk() (*UserAgentDataEngine, bool) {
	if o == nil || IsNil(o.Engine) {
		return nil, false
	}
	return o.Engine, true
}

// HasEngine returns a boolean if a field has been set.
func (o *UserAgentXMLDataArray) HasEngine() bool {
	if o != nil && !IsNil(o.Engine) {
		return true
	}

	return false
}

// SetEngine gets a reference to the given UserAgentDataEngine and assigns it to the Engine field.
func (o *UserAgentXMLDataArray) SetEngine(v UserAgentDataEngine) {
	o.Engine = &v
}

// GetOperatingSystem returns the OperatingSystem field value if set, zero value otherwise.
func (o *UserAgentXMLDataArray) GetOperatingSystem() UserAgentDataOperatingSystem {
	if o == nil || IsNil(o.OperatingSystem) {
		var ret UserAgentDataOperatingSystem
		return ret
	}
	return *o.OperatingSystem
}

// GetOperatingSystemOk returns a tuple with the OperatingSystem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAgentXMLDataArray) GetOperatingSystemOk() (*UserAgentDataOperatingSystem, bool) {
	if o == nil || IsNil(o.OperatingSystem) {
		return nil, false
	}
	return o.OperatingSystem, true
}

// HasOperatingSystem returns a boolean if a field has been set.
func (o *UserAgentXMLDataArray) HasOperatingSystem() bool {
	if o != nil && !IsNil(o.OperatingSystem) {
		return true
	}

	return false
}

// SetOperatingSystem gets a reference to the given UserAgentDataOperatingSystem and assigns it to the OperatingSystem field.
func (o *UserAgentXMLDataArray) SetOperatingSystem(v UserAgentDataOperatingSystem) {
	o.OperatingSystem = &v
}

func (o UserAgentXMLDataArray) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserAgentXMLDataArray) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UserAgentString) {
		toSerialize["user_agent_string"] = o.UserAgentString
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.VersionMajor) {
		toSerialize["version_major"] = o.VersionMajor
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.Engine) {
		toSerialize["engine"] = o.Engine
	}
	if !IsNil(o.OperatingSystem) {
		toSerialize["operating_system"] = o.OperatingSystem
	}
	return toSerialize, nil
}

type NullableUserAgentXMLDataArray struct {
	value *UserAgentXMLDataArray
	isSet bool
}

func (v NullableUserAgentXMLDataArray) Get() *UserAgentXMLDataArray {
	return v.value
}

func (v *NullableUserAgentXMLDataArray) Set(val *UserAgentXMLDataArray) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAgentXMLDataArray) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAgentXMLDataArray) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAgentXMLDataArray(val *UserAgentXMLDataArray) *NullableUserAgentXMLDataArray {
	return &NullableUserAgentXMLDataArray{value: val, isSet: true}
}

func (v NullableUserAgentXMLDataArray) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAgentXMLDataArray) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


