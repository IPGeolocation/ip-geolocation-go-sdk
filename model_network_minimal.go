/*
IPGeolocation.io - IP intelligence products

Ipgeolocation provides a set of APIs to make ip based decisions.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipgeolocationsdk

import (
	"encoding/json"
)

// checks if the NetworkMinimal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkMinimal{}

// NetworkMinimal struct for NetworkMinimal
type NetworkMinimal struct {
	Asn *NetworkMinimalAsn `json:"asn,omitempty"`
	Company *NetworkMinimalCompany `json:"company,omitempty"`
}

// NewNetworkMinimal instantiates a new NetworkMinimal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkMinimal() *NetworkMinimal {
	this := NetworkMinimal{}
	return &this
}

// NewNetworkMinimalWithDefaults instantiates a new NetworkMinimal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkMinimalWithDefaults() *NetworkMinimal {
	this := NetworkMinimal{}
	return &this
}

// GetAsn returns the Asn field value if set, zero value otherwise.
func (o *NetworkMinimal) GetAsn() NetworkMinimalAsn {
	if o == nil || IsNil(o.Asn) {
		var ret NetworkMinimalAsn
		return ret
	}
	return *o.Asn
}

// GetAsnOk returns a tuple with the Asn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkMinimal) GetAsnOk() (*NetworkMinimalAsn, bool) {
	if o == nil || IsNil(o.Asn) {
		return nil, false
	}
	return o.Asn, true
}

// HasAsn returns a boolean if a field has been set.
func (o *NetworkMinimal) HasAsn() bool {
	if o != nil && !IsNil(o.Asn) {
		return true
	}

	return false
}

// SetAsn gets a reference to the given NetworkMinimalAsn and assigns it to the Asn field.
func (o *NetworkMinimal) SetAsn(v NetworkMinimalAsn) {
	o.Asn = &v
}

// GetCompany returns the Company field value if set, zero value otherwise.
func (o *NetworkMinimal) GetCompany() NetworkMinimalCompany {
	if o == nil || IsNil(o.Company) {
		var ret NetworkMinimalCompany
		return ret
	}
	return *o.Company
}

// GetCompanyOk returns a tuple with the Company field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkMinimal) GetCompanyOk() (*NetworkMinimalCompany, bool) {
	if o == nil || IsNil(o.Company) {
		return nil, false
	}
	return o.Company, true
}

// HasCompany returns a boolean if a field has been set.
func (o *NetworkMinimal) HasCompany() bool {
	if o != nil && !IsNil(o.Company) {
		return true
	}

	return false
}

// SetCompany gets a reference to the given NetworkMinimalCompany and assigns it to the Company field.
func (o *NetworkMinimal) SetCompany(v NetworkMinimalCompany) {
	o.Company = &v
}

func (o NetworkMinimal) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkMinimal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Asn) {
		toSerialize["asn"] = o.Asn
	}
	if !IsNil(o.Company) {
		toSerialize["company"] = o.Company
	}
	return toSerialize, nil
}

type NullableNetworkMinimal struct {
	value *NetworkMinimal
	isSet bool
}

func (v NullableNetworkMinimal) Get() *NetworkMinimal {
	return v.value
}

func (v *NullableNetworkMinimal) Set(val *NetworkMinimal) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkMinimal) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkMinimal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkMinimal(val *NetworkMinimal) *NullableNetworkMinimal {
	return &NullableNetworkMinimal{value: val, isSet: true}
}

func (v NullableNetworkMinimal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkMinimal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


