/*
IPGeolocation.io - IP intelligence products

Ipgeolocation provides a set of APIs to make ip based decisions.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipgeolocationsdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type TimezoneAPI interface {

	/*
	GetTimezoneInfo Timezone information details

	The Time Zone API provides current time, date, and time zone-related information. It supports various input types including time zone name, geographic coordinates, addresses, IPs, and location codes.

The API determines the time zone based on the following priority order if multiple parameters are provided:
  1. Time Zone Name
  2. Geographic Coordinates (latitude & longitude)
  3. Location Address
  4. IP Address
  5. IATA Code
  6. ICAO Code
  7. UN/LOCODE

Enriched response data is returned based on the type of input:
- IP: includes geolocation info
- Address: includes location metadata
- IATA/ICAO: includes airport info
- UN/LOCODE: includes city details

You can call the time zone API without passing any time zone, coordinates, IATA, ICAO, LO code or IP address as well. It will use the calling machine's IP address to return the regional time zone information.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetTimezoneInfoRequest
	*/
	GetTimezoneInfo(ctx context.Context) ApiGetTimezoneInfoRequest

	// GetTimezoneInfoExecute executes the request
	//  @return TimeZoneDetailedResponse
	GetTimezoneInfoExecute(r ApiGetTimezoneInfoRequest) (*TimeZoneDetailedResponse, *http.Response, error)
}

// TimezoneAPIService TimezoneAPI service
type TimezoneAPIService service

type ApiGetTimezoneInfoRequest struct {
	ctx context.Context
	ApiService TimezoneAPI
	tz *string
	location *string
	lat *float32
	long *float32
	ip *string
	iataCode *string
	icaoCode *string
	loCode *string
	output *string
	lang *string
}

// pass a valid time zone name as a query parameter tz to get the time zone information.
func (r ApiGetTimezoneInfoRequest) Tz(tz string) ApiGetTimezoneInfoRequest {
	r.tz = &tz
	return r
}

// pass any address of a location as the query parameter location to get the time zone information.
func (r ApiGetTimezoneInfoRequest) Location(location string) ApiGetTimezoneInfoRequest {
	r.location = &location
	return r
}

// pass the latitude of a location as query parameters to get the time zone information.
func (r ApiGetTimezoneInfoRequest) Lat(lat float32) ApiGetTimezoneInfoRequest {
	r.lat = &lat
	return r
}

// pass the longitude of a location as query parameters to get the time zone information.
func (r ApiGetTimezoneInfoRequest) Long(long float32) ApiGetTimezoneInfoRequest {
	r.long = &long
	return r
}

// You can pass any IPv4 or IPv6 address as a query parameter ip to get the regional timezone information.
func (r ApiGetTimezoneInfoRequest) Ip(ip string) ApiGetTimezoneInfoRequest {
	r.ip = &ip
	return r
}

// pass any 3 letter IATA code as a query paramter iata_code to get the comprehensive airport details along with the time zone information, in which that airport exists.
func (r ApiGetTimezoneInfoRequest) IataCode(iataCode string) ApiGetTimezoneInfoRequest {
	r.iataCode = &iataCode
	return r
}

// pass any 4 letter ICAO code as a query paramter icao_code to get the comprehensive airport details along with the time zone information, in which that airport exists.
func (r ApiGetTimezoneInfoRequest) IcaoCode(icaoCode string) ApiGetTimezoneInfoRequest {
	r.icaoCode = &icaoCode
	return r
}

// pass any 5 letter UNLOCODE as a query paramter lo_code to get the comprehensive lo code/city details along with the time zone information of the concerned city.
func (r ApiGetTimezoneInfoRequest) LoCode(loCode string) ApiGetTimezoneInfoRequest {
	r.loCode = &loCode
	return r
}

// Desired output format (json or xml).
func (r ApiGetTimezoneInfoRequest) Output(output string) ApiGetTimezoneInfoRequest {
	r.output = &output
	return r
}

// By default, the API responds in English. You can change the response language by passing the language code as a query parameter &#x60;lang&#x60;. Multi language feature is available only for &#x60;paid users&#x60;.
func (r ApiGetTimezoneInfoRequest) Lang(lang string) ApiGetTimezoneInfoRequest {
	r.lang = &lang
	return r
}

func (r ApiGetTimezoneInfoRequest) Execute() (*TimeZoneDetailedResponse, *http.Response, error) {
	return r.ApiService.GetTimezoneInfoExecute(r)
}

/*
GetTimezoneInfo Timezone information details

The Time Zone API provides current time, date, and time zone-related information. It supports various input types including time zone name, geographic coordinates, addresses, IPs, and location codes.

The API determines the time zone based on the following priority order if multiple parameters are provided:
  1. Time Zone Name
  2. Geographic Coordinates (latitude & longitude)
  3. Location Address
  4. IP Address
  5. IATA Code
  6. ICAO Code
  7. UN/LOCODE

Enriched response data is returned based on the type of input:
- IP: includes geolocation info
- Address: includes location metadata
- IATA/ICAO: includes airport info
- UN/LOCODE: includes city details

You can call the time zone API without passing any time zone, coordinates, IATA, ICAO, LO code or IP address as well. It will use the calling machine's IP address to return the regional time zone information.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetTimezoneInfoRequest
*/
func (a *TimezoneAPIService) GetTimezoneInfo(ctx context.Context) ApiGetTimezoneInfoRequest {
	return ApiGetTimezoneInfoRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return TimeZoneDetailedResponse
func (a *TimezoneAPIService) GetTimezoneInfoExecute(r ApiGetTimezoneInfoRequest) (*TimeZoneDetailedResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *TimeZoneDetailedResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "TimezoneAPIService.GetTimezoneInfo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/timezone"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.tz != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tz", r.tz, "form", "")
	}
	if r.location != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "location", r.location, "form", "")
	}
	if r.lat != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lat", r.lat, "form", "")
	}
	if r.long != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "long", r.long, "form", "")
	}
	if r.ip != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ip", r.ip, "form", "")
	}
	if r.iataCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "iata_code", r.iataCode, "form", "")
	}
	if r.icaoCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "icao_code", r.icaoCode, "form", "")
	}
	if r.loCode != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lo_code", r.loCode, "form", "")
	}
	if r.output != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "output", r.output, "form", "")
	}
	if r.lang != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lang", r.lang, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apiKey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 499 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
