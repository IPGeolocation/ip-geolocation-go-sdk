/*
IPGeolocation.io - IP intelligence products

Ipgeolocation provides a set of APIs to make ip based decisions.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipgeolocationsdk

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
)


type AstronomyAPI interface {

	/*
	GetAstronomyDetails Method for GetAstronomyDetails

	The Astronomy API provides the location-based rise and set times for the Sun and Moon along with the current position, distance from earth, and azimuth of the Sun and the Moon for a specific date at the queried time.


	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetAstronomyDetailsRequest
	*/
	GetAstronomyDetails(ctx context.Context) ApiGetAstronomyDetailsRequest

	// GetAstronomyDetailsExecute executes the request
	//  @return AstronomyResponse
	GetAstronomyDetailsExecute(r ApiGetAstronomyDetailsRequest) (*AstronomyResponse, *http.Response, error)
}

// AstronomyAPIService AstronomyAPI service
type AstronomyAPIService service

type ApiGetAstronomyDetailsRequest struct {
	ctx context.Context
	ApiService AstronomyAPI
	ip *string
	location *string
	lat *string
	long *string
	timeZone *string
	date *string
	elevation *float64
	output *string
	lang *string
}

// query paramter &#39;ip&#39;. If not provided, will be your network IP
func (r ApiGetAstronomyDetailsRequest) Ip(ip string) ApiGetAstronomyDetailsRequest {
	r.ip = &ip
	return r
}

// query paramter &#39;location&#39;. If not provided, will be your ip location
func (r ApiGetAstronomyDetailsRequest) Location(location string) ApiGetAstronomyDetailsRequest {
	r.location = &location
	return r
}

// query paramter &#39;lat&#39;.
func (r ApiGetAstronomyDetailsRequest) Lat(lat string) ApiGetAstronomyDetailsRequest {
	r.lat = &lat
	return r
}

// query paramter &#39;long&#39;.
func (r ApiGetAstronomyDetailsRequest) Long(long string) ApiGetAstronomyDetailsRequest {
	r.long = &long
	return r
}

func (r ApiGetAstronomyDetailsRequest) TimeZone(timeZone string) ApiGetAstronomyDetailsRequest {
	r.timeZone = &timeZone
	return r
}

// The date (YYYY-MM-DD) to lookup for. default will be the current date
func (r ApiGetAstronomyDetailsRequest) Date(date string) ApiGetAstronomyDetailsRequest {
	r.date = &date
	return r
}

// query parameter &#39;elevation&#39;
func (r ApiGetAstronomyDetailsRequest) Elevation(elevation float64) ApiGetAstronomyDetailsRequest {
	r.elevation = &elevation
	return r
}

// Desired output format.
func (r ApiGetAstronomyDetailsRequest) Output(output string) ApiGetAstronomyDetailsRequest {
	r.output = &output
	return r
}

// By default, the API responds in English. You can change the response language by passing the language code as a query parameter &#x60;lang&#x60;. Multi language feature is available only for &#x60;paid users&#x60;.
func (r ApiGetAstronomyDetailsRequest) Lang(lang string) ApiGetAstronomyDetailsRequest {
	r.lang = &lang
	return r
}

func (r ApiGetAstronomyDetailsRequest) Execute() (*AstronomyResponse, *http.Response, error) {
	return r.ApiService.GetAstronomyDetailsExecute(r)
}

/*
GetAstronomyDetails Method for GetAstronomyDetails

The Astronomy API provides the location-based rise and set times for the Sun and Moon along with the current position, distance from earth, and azimuth of the Sun and the Moon for a specific date at the queried time.


 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetAstronomyDetailsRequest
*/
func (a *AstronomyAPIService) GetAstronomyDetails(ctx context.Context) ApiGetAstronomyDetailsRequest {
	return ApiGetAstronomyDetailsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return AstronomyResponse
func (a *AstronomyAPIService) GetAstronomyDetailsExecute(r ApiGetAstronomyDetailsRequest) (*AstronomyResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AstronomyResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "AstronomyAPIService.GetAstronomyDetails")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/astronomy"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ip != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ip", r.ip, "form", "")
	}
	if r.location != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "location", r.location, "form", "")
	}
	if r.lat != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lat", r.lat, "form", "")
	}
	if r.long != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "long", r.long, "form", "")
	}
	if r.timeZone != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "time_zone", r.timeZone, "form", "")
	}
	if r.date != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "date", r.date, "form", "")
	}
	if r.elevation != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "elevation", r.elevation, "form", "")
	}
	if r.output != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "output", r.output, "form", "")
	}
	if r.lang != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "lang", r.lang, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json", "application/xml"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["ApiKeyAuth"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apiKey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 401 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 405 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 429 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 499 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
