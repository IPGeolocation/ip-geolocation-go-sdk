/*
IPGeolocation.io - IP intelligence products

Ipgeolocation provides a set of APIs to make ip based decisions.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipgeolocationsdk

import (
	"encoding/json"
)

// checks if the CountryMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CountryMetadata{}

// CountryMetadata struct for CountryMetadata
type CountryMetadata struct {
	CallingCode *string `json:"calling_code,omitempty"`
	Tld *string `json:"tld,omitempty"`
	Languages []string `json:"languages,omitempty"`
}

// NewCountryMetadata instantiates a new CountryMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCountryMetadata() *CountryMetadata {
	this := CountryMetadata{}
	return &this
}

// NewCountryMetadataWithDefaults instantiates a new CountryMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCountryMetadataWithDefaults() *CountryMetadata {
	this := CountryMetadata{}
	return &this
}

// GetCallingCode returns the CallingCode field value if set, zero value otherwise.
func (o *CountryMetadata) GetCallingCode() string {
	if o == nil || IsNil(o.CallingCode) {
		var ret string
		return ret
	}
	return *o.CallingCode
}

// GetCallingCodeOk returns a tuple with the CallingCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryMetadata) GetCallingCodeOk() (*string, bool) {
	if o == nil || IsNil(o.CallingCode) {
		return nil, false
	}
	return o.CallingCode, true
}

// HasCallingCode returns a boolean if a field has been set.
func (o *CountryMetadata) HasCallingCode() bool {
	if o != nil && !IsNil(o.CallingCode) {
		return true
	}

	return false
}

// SetCallingCode gets a reference to the given string and assigns it to the CallingCode field.
func (o *CountryMetadata) SetCallingCode(v string) {
	o.CallingCode = &v
}

// GetTld returns the Tld field value if set, zero value otherwise.
func (o *CountryMetadata) GetTld() string {
	if o == nil || IsNil(o.Tld) {
		var ret string
		return ret
	}
	return *o.Tld
}

// GetTldOk returns a tuple with the Tld field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryMetadata) GetTldOk() (*string, bool) {
	if o == nil || IsNil(o.Tld) {
		return nil, false
	}
	return o.Tld, true
}

// HasTld returns a boolean if a field has been set.
func (o *CountryMetadata) HasTld() bool {
	if o != nil && !IsNil(o.Tld) {
		return true
	}

	return false
}

// SetTld gets a reference to the given string and assigns it to the Tld field.
func (o *CountryMetadata) SetTld(v string) {
	o.Tld = &v
}

// GetLanguages returns the Languages field value if set, zero value otherwise.
func (o *CountryMetadata) GetLanguages() []string {
	if o == nil || IsNil(o.Languages) {
		var ret []string
		return ret
	}
	return o.Languages
}

// GetLanguagesOk returns a tuple with the Languages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CountryMetadata) GetLanguagesOk() ([]string, bool) {
	if o == nil || IsNil(o.Languages) {
		return nil, false
	}
	return o.Languages, true
}

// HasLanguages returns a boolean if a field has been set.
func (o *CountryMetadata) HasLanguages() bool {
	if o != nil && !IsNil(o.Languages) {
		return true
	}

	return false
}

// SetLanguages gets a reference to the given []string and assigns it to the Languages field.
func (o *CountryMetadata) SetLanguages(v []string) {
	o.Languages = v
}

func (o CountryMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CountryMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CallingCode) {
		toSerialize["calling_code"] = o.CallingCode
	}
	if !IsNil(o.Tld) {
		toSerialize["tld"] = o.Tld
	}
	if !IsNil(o.Languages) {
		toSerialize["languages"] = o.Languages
	}
	return toSerialize, nil
}

type NullableCountryMetadata struct {
	value *CountryMetadata
	isSet bool
}

func (v NullableCountryMetadata) Get() *CountryMetadata {
	return v.value
}

func (v *NullableCountryMetadata) Set(val *CountryMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableCountryMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableCountryMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCountryMetadata(val *CountryMetadata) *NullableCountryMetadata {
	return &NullableCountryMetadata{value: val, isSet: true}
}

func (v NullableCountryMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCountryMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


