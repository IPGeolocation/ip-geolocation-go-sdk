/*
IPGeolocation.io - IP intelligence products

Ipgeolocation provides a set of APIs to make ip based decisions.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipgeolocationsdk

import (
	"encoding/json"
)

// checks if the UserAgentDataEngine type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserAgentDataEngine{}

// UserAgentDataEngine struct for UserAgentDataEngine
type UserAgentDataEngine struct {
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
	Version *string `json:"version,omitempty"`
	VersionMajor *string `json:"version_major,omitempty"`
}

// NewUserAgentDataEngine instantiates a new UserAgentDataEngine object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserAgentDataEngine() *UserAgentDataEngine {
	this := UserAgentDataEngine{}
	return &this
}

// NewUserAgentDataEngineWithDefaults instantiates a new UserAgentDataEngine object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserAgentDataEngineWithDefaults() *UserAgentDataEngine {
	this := UserAgentDataEngine{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UserAgentDataEngine) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAgentDataEngine) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UserAgentDataEngine) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UserAgentDataEngine) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UserAgentDataEngine) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAgentDataEngine) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UserAgentDataEngine) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UserAgentDataEngine) SetType(v string) {
	o.Type = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *UserAgentDataEngine) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAgentDataEngine) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *UserAgentDataEngine) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *UserAgentDataEngine) SetVersion(v string) {
	o.Version = &v
}

// GetVersionMajor returns the VersionMajor field value if set, zero value otherwise.
func (o *UserAgentDataEngine) GetVersionMajor() string {
	if o == nil || IsNil(o.VersionMajor) {
		var ret string
		return ret
	}
	return *o.VersionMajor
}

// GetVersionMajorOk returns a tuple with the VersionMajor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAgentDataEngine) GetVersionMajorOk() (*string, bool) {
	if o == nil || IsNil(o.VersionMajor) {
		return nil, false
	}
	return o.VersionMajor, true
}

// HasVersionMajor returns a boolean if a field has been set.
func (o *UserAgentDataEngine) HasVersionMajor() bool {
	if o != nil && !IsNil(o.VersionMajor) {
		return true
	}

	return false
}

// SetVersionMajor gets a reference to the given string and assigns it to the VersionMajor field.
func (o *UserAgentDataEngine) SetVersionMajor(v string) {
	o.VersionMajor = &v
}

func (o UserAgentDataEngine) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserAgentDataEngine) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.VersionMajor) {
		toSerialize["version_major"] = o.VersionMajor
	}
	return toSerialize, nil
}

type NullableUserAgentDataEngine struct {
	value *UserAgentDataEngine
	isSet bool
}

func (v NullableUserAgentDataEngine) Get() *UserAgentDataEngine {
	return v.value
}

func (v *NullableUserAgentDataEngine) Set(val *UserAgentDataEngine) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAgentDataEngine) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAgentDataEngine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAgentDataEngine(val *UserAgentDataEngine) *NullableUserAgentDataEngine {
	return &NullableUserAgentDataEngine{value: val, isSet: true}
}

func (v NullableUserAgentDataEngine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAgentDataEngine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


