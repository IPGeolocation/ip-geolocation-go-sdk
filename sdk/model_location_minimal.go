/*
IPGeolocation.io - IP intelligence products

Ipgeolocation provides a set of APIs to make ip based decisions.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipgeolocationsdk

import (
	"encoding/json"
)

// checks if the LocationMinimal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocationMinimal{}

// LocationMinimal struct for LocationMinimal
type LocationMinimal struct {
	ContinentCode *string `json:"continent_code,omitempty"`
	ContinentName *string `json:"continent_name,omitempty"`
	CountryCode2 *string `json:"country_code2,omitempty"`
	CountryCode3 *string `json:"country_code3,omitempty"`
	CountryName *string `json:"country_name,omitempty"`
	CountryNameOfficial *string `json:"country_name_official,omitempty"`
	CountryCapital *string `json:"country_capital,omitempty"`
	StateProv *string `json:"state_prov,omitempty"`
	StateCode *string `json:"state_code,omitempty"`
	District *string `json:"district,omitempty"`
	City *string `json:"city,omitempty"`
	Zipcode *string `json:"zipcode,omitempty"`
	Latitude *string `json:"latitude,omitempty"`
	Longitude *string `json:"longitude,omitempty"`
	IsEu *bool `json:"is_eu,omitempty"`
	CountryFlag *string `json:"country_flag,omitempty"`
	GeonameId *string `json:"geoname_id,omitempty"`
	CountryEmoji *string `json:"country_emoji,omitempty"`
}

// NewLocationMinimal instantiates a new LocationMinimal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationMinimal() *LocationMinimal {
	this := LocationMinimal{}
	return &this
}

// NewLocationMinimalWithDefaults instantiates a new LocationMinimal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationMinimalWithDefaults() *LocationMinimal {
	this := LocationMinimal{}
	return &this
}

// GetContinentCode returns the ContinentCode field value if set, zero value otherwise.
func (o *LocationMinimal) GetContinentCode() string {
	if o == nil || IsNil(o.ContinentCode) {
		var ret string
		return ret
	}
	return *o.ContinentCode
}

// GetContinentCodeOk returns a tuple with the ContinentCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationMinimal) GetContinentCodeOk() (*string, bool) {
	if o == nil || IsNil(o.ContinentCode) {
		return nil, false
	}
	return o.ContinentCode, true
}

// HasContinentCode returns a boolean if a field has been set.
func (o *LocationMinimal) HasContinentCode() bool {
	if o != nil && !IsNil(o.ContinentCode) {
		return true
	}

	return false
}

// SetContinentCode gets a reference to the given string and assigns it to the ContinentCode field.
func (o *LocationMinimal) SetContinentCode(v string) {
	o.ContinentCode = &v
}

// GetContinentName returns the ContinentName field value if set, zero value otherwise.
func (o *LocationMinimal) GetContinentName() string {
	if o == nil || IsNil(o.ContinentName) {
		var ret string
		return ret
	}
	return *o.ContinentName
}

// GetContinentNameOk returns a tuple with the ContinentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationMinimal) GetContinentNameOk() (*string, bool) {
	if o == nil || IsNil(o.ContinentName) {
		return nil, false
	}
	return o.ContinentName, true
}

// HasContinentName returns a boolean if a field has been set.
func (o *LocationMinimal) HasContinentName() bool {
	if o != nil && !IsNil(o.ContinentName) {
		return true
	}

	return false
}

// SetContinentName gets a reference to the given string and assigns it to the ContinentName field.
func (o *LocationMinimal) SetContinentName(v string) {
	o.ContinentName = &v
}

// GetCountryCode2 returns the CountryCode2 field value if set, zero value otherwise.
func (o *LocationMinimal) GetCountryCode2() string {
	if o == nil || IsNil(o.CountryCode2) {
		var ret string
		return ret
	}
	return *o.CountryCode2
}

// GetCountryCode2Ok returns a tuple with the CountryCode2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationMinimal) GetCountryCode2Ok() (*string, bool) {
	if o == nil || IsNil(o.CountryCode2) {
		return nil, false
	}
	return o.CountryCode2, true
}

// HasCountryCode2 returns a boolean if a field has been set.
func (o *LocationMinimal) HasCountryCode2() bool {
	if o != nil && !IsNil(o.CountryCode2) {
		return true
	}

	return false
}

// SetCountryCode2 gets a reference to the given string and assigns it to the CountryCode2 field.
func (o *LocationMinimal) SetCountryCode2(v string) {
	o.CountryCode2 = &v
}

// GetCountryCode3 returns the CountryCode3 field value if set, zero value otherwise.
func (o *LocationMinimal) GetCountryCode3() string {
	if o == nil || IsNil(o.CountryCode3) {
		var ret string
		return ret
	}
	return *o.CountryCode3
}

// GetCountryCode3Ok returns a tuple with the CountryCode3 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationMinimal) GetCountryCode3Ok() (*string, bool) {
	if o == nil || IsNil(o.CountryCode3) {
		return nil, false
	}
	return o.CountryCode3, true
}

// HasCountryCode3 returns a boolean if a field has been set.
func (o *LocationMinimal) HasCountryCode3() bool {
	if o != nil && !IsNil(o.CountryCode3) {
		return true
	}

	return false
}

// SetCountryCode3 gets a reference to the given string and assigns it to the CountryCode3 field.
func (o *LocationMinimal) SetCountryCode3(v string) {
	o.CountryCode3 = &v
}

// GetCountryName returns the CountryName field value if set, zero value otherwise.
func (o *LocationMinimal) GetCountryName() string {
	if o == nil || IsNil(o.CountryName) {
		var ret string
		return ret
	}
	return *o.CountryName
}

// GetCountryNameOk returns a tuple with the CountryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationMinimal) GetCountryNameOk() (*string, bool) {
	if o == nil || IsNil(o.CountryName) {
		return nil, false
	}
	return o.CountryName, true
}

// HasCountryName returns a boolean if a field has been set.
func (o *LocationMinimal) HasCountryName() bool {
	if o != nil && !IsNil(o.CountryName) {
		return true
	}

	return false
}

// SetCountryName gets a reference to the given string and assigns it to the CountryName field.
func (o *LocationMinimal) SetCountryName(v string) {
	o.CountryName = &v
}

// GetCountryNameOfficial returns the CountryNameOfficial field value if set, zero value otherwise.
func (o *LocationMinimal) GetCountryNameOfficial() string {
	if o == nil || IsNil(o.CountryNameOfficial) {
		var ret string
		return ret
	}
	return *o.CountryNameOfficial
}

// GetCountryNameOfficialOk returns a tuple with the CountryNameOfficial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationMinimal) GetCountryNameOfficialOk() (*string, bool) {
	if o == nil || IsNil(o.CountryNameOfficial) {
		return nil, false
	}
	return o.CountryNameOfficial, true
}

// HasCountryNameOfficial returns a boolean if a field has been set.
func (o *LocationMinimal) HasCountryNameOfficial() bool {
	if o != nil && !IsNil(o.CountryNameOfficial) {
		return true
	}

	return false
}

// SetCountryNameOfficial gets a reference to the given string and assigns it to the CountryNameOfficial field.
func (o *LocationMinimal) SetCountryNameOfficial(v string) {
	o.CountryNameOfficial = &v
}

// GetCountryCapital returns the CountryCapital field value if set, zero value otherwise.
func (o *LocationMinimal) GetCountryCapital() string {
	if o == nil || IsNil(o.CountryCapital) {
		var ret string
		return ret
	}
	return *o.CountryCapital
}

// GetCountryCapitalOk returns a tuple with the CountryCapital field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationMinimal) GetCountryCapitalOk() (*string, bool) {
	if o == nil || IsNil(o.CountryCapital) {
		return nil, false
	}
	return o.CountryCapital, true
}

// HasCountryCapital returns a boolean if a field has been set.
func (o *LocationMinimal) HasCountryCapital() bool {
	if o != nil && !IsNil(o.CountryCapital) {
		return true
	}

	return false
}

// SetCountryCapital gets a reference to the given string and assigns it to the CountryCapital field.
func (o *LocationMinimal) SetCountryCapital(v string) {
	o.CountryCapital = &v
}

// GetStateProv returns the StateProv field value if set, zero value otherwise.
func (o *LocationMinimal) GetStateProv() string {
	if o == nil || IsNil(o.StateProv) {
		var ret string
		return ret
	}
	return *o.StateProv
}

// GetStateProvOk returns a tuple with the StateProv field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationMinimal) GetStateProvOk() (*string, bool) {
	if o == nil || IsNil(o.StateProv) {
		return nil, false
	}
	return o.StateProv, true
}

// HasStateProv returns a boolean if a field has been set.
func (o *LocationMinimal) HasStateProv() bool {
	if o != nil && !IsNil(o.StateProv) {
		return true
	}

	return false
}

// SetStateProv gets a reference to the given string and assigns it to the StateProv field.
func (o *LocationMinimal) SetStateProv(v string) {
	o.StateProv = &v
}

// GetStateCode returns the StateCode field value if set, zero value otherwise.
func (o *LocationMinimal) GetStateCode() string {
	if o == nil || IsNil(o.StateCode) {
		var ret string
		return ret
	}
	return *o.StateCode
}

// GetStateCodeOk returns a tuple with the StateCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationMinimal) GetStateCodeOk() (*string, bool) {
	if o == nil || IsNil(o.StateCode) {
		return nil, false
	}
	return o.StateCode, true
}

// HasStateCode returns a boolean if a field has been set.
func (o *LocationMinimal) HasStateCode() bool {
	if o != nil && !IsNil(o.StateCode) {
		return true
	}

	return false
}

// SetStateCode gets a reference to the given string and assigns it to the StateCode field.
func (o *LocationMinimal) SetStateCode(v string) {
	o.StateCode = &v
}

// GetDistrict returns the District field value if set, zero value otherwise.
func (o *LocationMinimal) GetDistrict() string {
	if o == nil || IsNil(o.District) {
		var ret string
		return ret
	}
	return *o.District
}

// GetDistrictOk returns a tuple with the District field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationMinimal) GetDistrictOk() (*string, bool) {
	if o == nil || IsNil(o.District) {
		return nil, false
	}
	return o.District, true
}

// HasDistrict returns a boolean if a field has been set.
func (o *LocationMinimal) HasDistrict() bool {
	if o != nil && !IsNil(o.District) {
		return true
	}

	return false
}

// SetDistrict gets a reference to the given string and assigns it to the District field.
func (o *LocationMinimal) SetDistrict(v string) {
	o.District = &v
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *LocationMinimal) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationMinimal) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *LocationMinimal) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *LocationMinimal) SetCity(v string) {
	o.City = &v
}

// GetZipcode returns the Zipcode field value if set, zero value otherwise.
func (o *LocationMinimal) GetZipcode() string {
	if o == nil || IsNil(o.Zipcode) {
		var ret string
		return ret
	}
	return *o.Zipcode
}

// GetZipcodeOk returns a tuple with the Zipcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationMinimal) GetZipcodeOk() (*string, bool) {
	if o == nil || IsNil(o.Zipcode) {
		return nil, false
	}
	return o.Zipcode, true
}

// HasZipcode returns a boolean if a field has been set.
func (o *LocationMinimal) HasZipcode() bool {
	if o != nil && !IsNil(o.Zipcode) {
		return true
	}

	return false
}

// SetZipcode gets a reference to the given string and assigns it to the Zipcode field.
func (o *LocationMinimal) SetZipcode(v string) {
	o.Zipcode = &v
}

// GetLatitude returns the Latitude field value if set, zero value otherwise.
func (o *LocationMinimal) GetLatitude() string {
	if o == nil || IsNil(o.Latitude) {
		var ret string
		return ret
	}
	return *o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationMinimal) GetLatitudeOk() (*string, bool) {
	if o == nil || IsNil(o.Latitude) {
		return nil, false
	}
	return o.Latitude, true
}

// HasLatitude returns a boolean if a field has been set.
func (o *LocationMinimal) HasLatitude() bool {
	if o != nil && !IsNil(o.Latitude) {
		return true
	}

	return false
}

// SetLatitude gets a reference to the given string and assigns it to the Latitude field.
func (o *LocationMinimal) SetLatitude(v string) {
	o.Latitude = &v
}

// GetLongitude returns the Longitude field value if set, zero value otherwise.
func (o *LocationMinimal) GetLongitude() string {
	if o == nil || IsNil(o.Longitude) {
		var ret string
		return ret
	}
	return *o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationMinimal) GetLongitudeOk() (*string, bool) {
	if o == nil || IsNil(o.Longitude) {
		return nil, false
	}
	return o.Longitude, true
}

// HasLongitude returns a boolean if a field has been set.
func (o *LocationMinimal) HasLongitude() bool {
	if o != nil && !IsNil(o.Longitude) {
		return true
	}

	return false
}

// SetLongitude gets a reference to the given string and assigns it to the Longitude field.
func (o *LocationMinimal) SetLongitude(v string) {
	o.Longitude = &v
}

// GetIsEu returns the IsEu field value if set, zero value otherwise.
func (o *LocationMinimal) GetIsEu() bool {
	if o == nil || IsNil(o.IsEu) {
		var ret bool
		return ret
	}
	return *o.IsEu
}

// GetIsEuOk returns a tuple with the IsEu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationMinimal) GetIsEuOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEu) {
		return nil, false
	}
	return o.IsEu, true
}

// HasIsEu returns a boolean if a field has been set.
func (o *LocationMinimal) HasIsEu() bool {
	if o != nil && !IsNil(o.IsEu) {
		return true
	}

	return false
}

// SetIsEu gets a reference to the given bool and assigns it to the IsEu field.
func (o *LocationMinimal) SetIsEu(v bool) {
	o.IsEu = &v
}

// GetCountryFlag returns the CountryFlag field value if set, zero value otherwise.
func (o *LocationMinimal) GetCountryFlag() string {
	if o == nil || IsNil(o.CountryFlag) {
		var ret string
		return ret
	}
	return *o.CountryFlag
}

// GetCountryFlagOk returns a tuple with the CountryFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationMinimal) GetCountryFlagOk() (*string, bool) {
	if o == nil || IsNil(o.CountryFlag) {
		return nil, false
	}
	return o.CountryFlag, true
}

// HasCountryFlag returns a boolean if a field has been set.
func (o *LocationMinimal) HasCountryFlag() bool {
	if o != nil && !IsNil(o.CountryFlag) {
		return true
	}

	return false
}

// SetCountryFlag gets a reference to the given string and assigns it to the CountryFlag field.
func (o *LocationMinimal) SetCountryFlag(v string) {
	o.CountryFlag = &v
}

// GetGeonameId returns the GeonameId field value if set, zero value otherwise.
func (o *LocationMinimal) GetGeonameId() string {
	if o == nil || IsNil(o.GeonameId) {
		var ret string
		return ret
	}
	return *o.GeonameId
}

// GetGeonameIdOk returns a tuple with the GeonameId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationMinimal) GetGeonameIdOk() (*string, bool) {
	if o == nil || IsNil(o.GeonameId) {
		return nil, false
	}
	return o.GeonameId, true
}

// HasGeonameId returns a boolean if a field has been set.
func (o *LocationMinimal) HasGeonameId() bool {
	if o != nil && !IsNil(o.GeonameId) {
		return true
	}

	return false
}

// SetGeonameId gets a reference to the given string and assigns it to the GeonameId field.
func (o *LocationMinimal) SetGeonameId(v string) {
	o.GeonameId = &v
}

// GetCountryEmoji returns the CountryEmoji field value if set, zero value otherwise.
func (o *LocationMinimal) GetCountryEmoji() string {
	if o == nil || IsNil(o.CountryEmoji) {
		var ret string
		return ret
	}
	return *o.CountryEmoji
}

// GetCountryEmojiOk returns a tuple with the CountryEmoji field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationMinimal) GetCountryEmojiOk() (*string, bool) {
	if o == nil || IsNil(o.CountryEmoji) {
		return nil, false
	}
	return o.CountryEmoji, true
}

// HasCountryEmoji returns a boolean if a field has been set.
func (o *LocationMinimal) HasCountryEmoji() bool {
	if o != nil && !IsNil(o.CountryEmoji) {
		return true
	}

	return false
}

// SetCountryEmoji gets a reference to the given string and assigns it to the CountryEmoji field.
func (o *LocationMinimal) SetCountryEmoji(v string) {
	o.CountryEmoji = &v
}

func (o LocationMinimal) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocationMinimal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ContinentCode) {
		toSerialize["continent_code"] = o.ContinentCode
	}
	if !IsNil(o.ContinentName) {
		toSerialize["continent_name"] = o.ContinentName
	}
	if !IsNil(o.CountryCode2) {
		toSerialize["country_code2"] = o.CountryCode2
	}
	if !IsNil(o.CountryCode3) {
		toSerialize["country_code3"] = o.CountryCode3
	}
	if !IsNil(o.CountryName) {
		toSerialize["country_name"] = o.CountryName
	}
	if !IsNil(o.CountryNameOfficial) {
		toSerialize["country_name_official"] = o.CountryNameOfficial
	}
	if !IsNil(o.CountryCapital) {
		toSerialize["country_capital"] = o.CountryCapital
	}
	if !IsNil(o.StateProv) {
		toSerialize["state_prov"] = o.StateProv
	}
	if !IsNil(o.StateCode) {
		toSerialize["state_code"] = o.StateCode
	}
	if !IsNil(o.District) {
		toSerialize["district"] = o.District
	}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.Zipcode) {
		toSerialize["zipcode"] = o.Zipcode
	}
	if !IsNil(o.Latitude) {
		toSerialize["latitude"] = o.Latitude
	}
	if !IsNil(o.Longitude) {
		toSerialize["longitude"] = o.Longitude
	}
	if !IsNil(o.IsEu) {
		toSerialize["is_eu"] = o.IsEu
	}
	if !IsNil(o.CountryFlag) {
		toSerialize["country_flag"] = o.CountryFlag
	}
	if !IsNil(o.GeonameId) {
		toSerialize["geoname_id"] = o.GeonameId
	}
	if !IsNil(o.CountryEmoji) {
		toSerialize["country_emoji"] = o.CountryEmoji
	}
	return toSerialize, nil
}

type NullableLocationMinimal struct {
	value *LocationMinimal
	isSet bool
}

func (v NullableLocationMinimal) Get() *LocationMinimal {
	return v.value
}

func (v *NullableLocationMinimal) Set(val *LocationMinimal) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationMinimal) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationMinimal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationMinimal(val *LocationMinimal) *NullableLocationMinimal {
	return &NullableLocationMinimal{value: val, isSet: true}
}

func (v NullableLocationMinimal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationMinimal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


