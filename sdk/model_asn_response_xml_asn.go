/*
IPGeolocation.io - IP intelligence products

Ipgeolocation provides a set of APIs to make ip based decisions.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipgeolocationsdk

import (
	"encoding/json"
)

// checks if the ASNResponseXMLAsn type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ASNResponseXMLAsn{}

// ASNResponseXMLAsn struct for ASNResponseXMLAsn
type ASNResponseXMLAsn struct {
	AsNumber *string `json:"as_number,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Country *string `json:"country,omitempty"`
	AsnName *string `json:"asn_name,omitempty"`
	Type *string `json:"type,omitempty"`
	Domain *string `json:"domain,omitempty"`
	DateAllocated *string `json:"date_allocated,omitempty"`
	AllocationStatus *string `json:"allocation_status,omitempty"`
	NumOfIpv4Routes *int32 `json:"num_of_ipv4_routes,omitempty"`
	NumOfIpv6Routes *int32 `json:"num_of_ipv6_routes,omitempty"`
	Rir *string `json:"rir,omitempty"`
	// It will only be included in the response, if you set include=routes in the request
	Routes []string `json:"routes,omitempty"`
	Upstreams []ASNConnection `json:"upstreams,omitempty"`
	Downstreams []ASNConnection `json:"downstreams,omitempty"`
	Peers []ASNConnection `json:"peers,omitempty"`
	WhoisResponse *string `json:"whois_response,omitempty"`
}

// NewASNResponseXMLAsn instantiates a new ASNResponseXMLAsn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewASNResponseXMLAsn() *ASNResponseXMLAsn {
	this := ASNResponseXMLAsn{}
	return &this
}

// NewASNResponseXMLAsnWithDefaults instantiates a new ASNResponseXMLAsn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewASNResponseXMLAsnWithDefaults() *ASNResponseXMLAsn {
	this := ASNResponseXMLAsn{}
	return &this
}

// GetAsNumber returns the AsNumber field value if set, zero value otherwise.
func (o *ASNResponseXMLAsn) GetAsNumber() string {
	if o == nil || IsNil(o.AsNumber) {
		var ret string
		return ret
	}
	return *o.AsNumber
}

// GetAsNumberOk returns a tuple with the AsNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASNResponseXMLAsn) GetAsNumberOk() (*string, bool) {
	if o == nil || IsNil(o.AsNumber) {
		return nil, false
	}
	return o.AsNumber, true
}

// HasAsNumber returns a boolean if a field has been set.
func (o *ASNResponseXMLAsn) HasAsNumber() bool {
	if o != nil && !IsNil(o.AsNumber) {
		return true
	}

	return false
}

// SetAsNumber gets a reference to the given string and assigns it to the AsNumber field.
func (o *ASNResponseXMLAsn) SetAsNumber(v string) {
	o.AsNumber = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *ASNResponseXMLAsn) GetOrganization() string {
	if o == nil || IsNil(o.Organization) {
		var ret string
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASNResponseXMLAsn) GetOrganizationOk() (*string, bool) {
	if o == nil || IsNil(o.Organization) {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *ASNResponseXMLAsn) HasOrganization() bool {
	if o != nil && !IsNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given string and assigns it to the Organization field.
func (o *ASNResponseXMLAsn) SetOrganization(v string) {
	o.Organization = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *ASNResponseXMLAsn) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASNResponseXMLAsn) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *ASNResponseXMLAsn) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *ASNResponseXMLAsn) SetCountry(v string) {
	o.Country = &v
}

// GetAsnName returns the AsnName field value if set, zero value otherwise.
func (o *ASNResponseXMLAsn) GetAsnName() string {
	if o == nil || IsNil(o.AsnName) {
		var ret string
		return ret
	}
	return *o.AsnName
}

// GetAsnNameOk returns a tuple with the AsnName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASNResponseXMLAsn) GetAsnNameOk() (*string, bool) {
	if o == nil || IsNil(o.AsnName) {
		return nil, false
	}
	return o.AsnName, true
}

// HasAsnName returns a boolean if a field has been set.
func (o *ASNResponseXMLAsn) HasAsnName() bool {
	if o != nil && !IsNil(o.AsnName) {
		return true
	}

	return false
}

// SetAsnName gets a reference to the given string and assigns it to the AsnName field.
func (o *ASNResponseXMLAsn) SetAsnName(v string) {
	o.AsnName = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ASNResponseXMLAsn) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASNResponseXMLAsn) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ASNResponseXMLAsn) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ASNResponseXMLAsn) SetType(v string) {
	o.Type = &v
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *ASNResponseXMLAsn) GetDomain() string {
	if o == nil || IsNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASNResponseXMLAsn) GetDomainOk() (*string, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *ASNResponseXMLAsn) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *ASNResponseXMLAsn) SetDomain(v string) {
	o.Domain = &v
}

// GetDateAllocated returns the DateAllocated field value if set, zero value otherwise.
func (o *ASNResponseXMLAsn) GetDateAllocated() string {
	if o == nil || IsNil(o.DateAllocated) {
		var ret string
		return ret
	}
	return *o.DateAllocated
}

// GetDateAllocatedOk returns a tuple with the DateAllocated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASNResponseXMLAsn) GetDateAllocatedOk() (*string, bool) {
	if o == nil || IsNil(o.DateAllocated) {
		return nil, false
	}
	return o.DateAllocated, true
}

// HasDateAllocated returns a boolean if a field has been set.
func (o *ASNResponseXMLAsn) HasDateAllocated() bool {
	if o != nil && !IsNil(o.DateAllocated) {
		return true
	}

	return false
}

// SetDateAllocated gets a reference to the given string and assigns it to the DateAllocated field.
func (o *ASNResponseXMLAsn) SetDateAllocated(v string) {
	o.DateAllocated = &v
}

// GetAllocationStatus returns the AllocationStatus field value if set, zero value otherwise.
func (o *ASNResponseXMLAsn) GetAllocationStatus() string {
	if o == nil || IsNil(o.AllocationStatus) {
		var ret string
		return ret
	}
	return *o.AllocationStatus
}

// GetAllocationStatusOk returns a tuple with the AllocationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASNResponseXMLAsn) GetAllocationStatusOk() (*string, bool) {
	if o == nil || IsNil(o.AllocationStatus) {
		return nil, false
	}
	return o.AllocationStatus, true
}

// HasAllocationStatus returns a boolean if a field has been set.
func (o *ASNResponseXMLAsn) HasAllocationStatus() bool {
	if o != nil && !IsNil(o.AllocationStatus) {
		return true
	}

	return false
}

// SetAllocationStatus gets a reference to the given string and assigns it to the AllocationStatus field.
func (o *ASNResponseXMLAsn) SetAllocationStatus(v string) {
	o.AllocationStatus = &v
}

// GetNumOfIpv4Routes returns the NumOfIpv4Routes field value if set, zero value otherwise.
func (o *ASNResponseXMLAsn) GetNumOfIpv4Routes() int32 {
	if o == nil || IsNil(o.NumOfIpv4Routes) {
		var ret int32
		return ret
	}
	return *o.NumOfIpv4Routes
}

// GetNumOfIpv4RoutesOk returns a tuple with the NumOfIpv4Routes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASNResponseXMLAsn) GetNumOfIpv4RoutesOk() (*int32, bool) {
	if o == nil || IsNil(o.NumOfIpv4Routes) {
		return nil, false
	}
	return o.NumOfIpv4Routes, true
}

// HasNumOfIpv4Routes returns a boolean if a field has been set.
func (o *ASNResponseXMLAsn) HasNumOfIpv4Routes() bool {
	if o != nil && !IsNil(o.NumOfIpv4Routes) {
		return true
	}

	return false
}

// SetNumOfIpv4Routes gets a reference to the given int32 and assigns it to the NumOfIpv4Routes field.
func (o *ASNResponseXMLAsn) SetNumOfIpv4Routes(v int32) {
	o.NumOfIpv4Routes = &v
}

// GetNumOfIpv6Routes returns the NumOfIpv6Routes field value if set, zero value otherwise.
func (o *ASNResponseXMLAsn) GetNumOfIpv6Routes() int32 {
	if o == nil || IsNil(o.NumOfIpv6Routes) {
		var ret int32
		return ret
	}
	return *o.NumOfIpv6Routes
}

// GetNumOfIpv6RoutesOk returns a tuple with the NumOfIpv6Routes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASNResponseXMLAsn) GetNumOfIpv6RoutesOk() (*int32, bool) {
	if o == nil || IsNil(o.NumOfIpv6Routes) {
		return nil, false
	}
	return o.NumOfIpv6Routes, true
}

// HasNumOfIpv6Routes returns a boolean if a field has been set.
func (o *ASNResponseXMLAsn) HasNumOfIpv6Routes() bool {
	if o != nil && !IsNil(o.NumOfIpv6Routes) {
		return true
	}

	return false
}

// SetNumOfIpv6Routes gets a reference to the given int32 and assigns it to the NumOfIpv6Routes field.
func (o *ASNResponseXMLAsn) SetNumOfIpv6Routes(v int32) {
	o.NumOfIpv6Routes = &v
}

// GetRir returns the Rir field value if set, zero value otherwise.
func (o *ASNResponseXMLAsn) GetRir() string {
	if o == nil || IsNil(o.Rir) {
		var ret string
		return ret
	}
	return *o.Rir
}

// GetRirOk returns a tuple with the Rir field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASNResponseXMLAsn) GetRirOk() (*string, bool) {
	if o == nil || IsNil(o.Rir) {
		return nil, false
	}
	return o.Rir, true
}

// HasRir returns a boolean if a field has been set.
func (o *ASNResponseXMLAsn) HasRir() bool {
	if o != nil && !IsNil(o.Rir) {
		return true
	}

	return false
}

// SetRir gets a reference to the given string and assigns it to the Rir field.
func (o *ASNResponseXMLAsn) SetRir(v string) {
	o.Rir = &v
}

// GetRoutes returns the Routes field value if set, zero value otherwise.
func (o *ASNResponseXMLAsn) GetRoutes() []string {
	if o == nil || IsNil(o.Routes) {
		var ret []string
		return ret
	}
	return o.Routes
}

// GetRoutesOk returns a tuple with the Routes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASNResponseXMLAsn) GetRoutesOk() ([]string, bool) {
	if o == nil || IsNil(o.Routes) {
		return nil, false
	}
	return o.Routes, true
}

// HasRoutes returns a boolean if a field has been set.
func (o *ASNResponseXMLAsn) HasRoutes() bool {
	if o != nil && !IsNil(o.Routes) {
		return true
	}

	return false
}

// SetRoutes gets a reference to the given []string and assigns it to the Routes field.
func (o *ASNResponseXMLAsn) SetRoutes(v []string) {
	o.Routes = v
}

// GetUpstreams returns the Upstreams field value if set, zero value otherwise.
func (o *ASNResponseXMLAsn) GetUpstreams() []ASNConnection {
	if o == nil || IsNil(o.Upstreams) {
		var ret []ASNConnection
		return ret
	}
	return o.Upstreams
}

// GetUpstreamsOk returns a tuple with the Upstreams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASNResponseXMLAsn) GetUpstreamsOk() ([]ASNConnection, bool) {
	if o == nil || IsNil(o.Upstreams) {
		return nil, false
	}
	return o.Upstreams, true
}

// HasUpstreams returns a boolean if a field has been set.
func (o *ASNResponseXMLAsn) HasUpstreams() bool {
	if o != nil && !IsNil(o.Upstreams) {
		return true
	}

	return false
}

// SetUpstreams gets a reference to the given []ASNConnection and assigns it to the Upstreams field.
func (o *ASNResponseXMLAsn) SetUpstreams(v []ASNConnection) {
	o.Upstreams = v
}

// GetDownstreams returns the Downstreams field value if set, zero value otherwise.
func (o *ASNResponseXMLAsn) GetDownstreams() []ASNConnection {
	if o == nil || IsNil(o.Downstreams) {
		var ret []ASNConnection
		return ret
	}
	return o.Downstreams
}

// GetDownstreamsOk returns a tuple with the Downstreams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASNResponseXMLAsn) GetDownstreamsOk() ([]ASNConnection, bool) {
	if o == nil || IsNil(o.Downstreams) {
		return nil, false
	}
	return o.Downstreams, true
}

// HasDownstreams returns a boolean if a field has been set.
func (o *ASNResponseXMLAsn) HasDownstreams() bool {
	if o != nil && !IsNil(o.Downstreams) {
		return true
	}

	return false
}

// SetDownstreams gets a reference to the given []ASNConnection and assigns it to the Downstreams field.
func (o *ASNResponseXMLAsn) SetDownstreams(v []ASNConnection) {
	o.Downstreams = v
}

// GetPeers returns the Peers field value if set, zero value otherwise.
func (o *ASNResponseXMLAsn) GetPeers() []ASNConnection {
	if o == nil || IsNil(o.Peers) {
		var ret []ASNConnection
		return ret
	}
	return o.Peers
}

// GetPeersOk returns a tuple with the Peers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASNResponseXMLAsn) GetPeersOk() ([]ASNConnection, bool) {
	if o == nil || IsNil(o.Peers) {
		return nil, false
	}
	return o.Peers, true
}

// HasPeers returns a boolean if a field has been set.
func (o *ASNResponseXMLAsn) HasPeers() bool {
	if o != nil && !IsNil(o.Peers) {
		return true
	}

	return false
}

// SetPeers gets a reference to the given []ASNConnection and assigns it to the Peers field.
func (o *ASNResponseXMLAsn) SetPeers(v []ASNConnection) {
	o.Peers = v
}

// GetWhoisResponse returns the WhoisResponse field value if set, zero value otherwise.
func (o *ASNResponseXMLAsn) GetWhoisResponse() string {
	if o == nil || IsNil(o.WhoisResponse) {
		var ret string
		return ret
	}
	return *o.WhoisResponse
}

// GetWhoisResponseOk returns a tuple with the WhoisResponse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ASNResponseXMLAsn) GetWhoisResponseOk() (*string, bool) {
	if o == nil || IsNil(o.WhoisResponse) {
		return nil, false
	}
	return o.WhoisResponse, true
}

// HasWhoisResponse returns a boolean if a field has been set.
func (o *ASNResponseXMLAsn) HasWhoisResponse() bool {
	if o != nil && !IsNil(o.WhoisResponse) {
		return true
	}

	return false
}

// SetWhoisResponse gets a reference to the given string and assigns it to the WhoisResponse field.
func (o *ASNResponseXMLAsn) SetWhoisResponse(v string) {
	o.WhoisResponse = &v
}

func (o ASNResponseXMLAsn) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ASNResponseXMLAsn) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AsNumber) {
		toSerialize["as_number"] = o.AsNumber
	}
	if !IsNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.AsnName) {
		toSerialize["asn_name"] = o.AsnName
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if !IsNil(o.DateAllocated) {
		toSerialize["date_allocated"] = o.DateAllocated
	}
	if !IsNil(o.AllocationStatus) {
		toSerialize["allocation_status"] = o.AllocationStatus
	}
	if !IsNil(o.NumOfIpv4Routes) {
		toSerialize["num_of_ipv4_routes"] = o.NumOfIpv4Routes
	}
	if !IsNil(o.NumOfIpv6Routes) {
		toSerialize["num_of_ipv6_routes"] = o.NumOfIpv6Routes
	}
	if !IsNil(o.Rir) {
		toSerialize["rir"] = o.Rir
	}
	if !IsNil(o.Routes) {
		toSerialize["routes"] = o.Routes
	}
	if !IsNil(o.Upstreams) {
		toSerialize["upstreams"] = o.Upstreams
	}
	if !IsNil(o.Downstreams) {
		toSerialize["downstreams"] = o.Downstreams
	}
	if !IsNil(o.Peers) {
		toSerialize["peers"] = o.Peers
	}
	if !IsNil(o.WhoisResponse) {
		toSerialize["whois_response"] = o.WhoisResponse
	}
	return toSerialize, nil
}

type NullableASNResponseXMLAsn struct {
	value *ASNResponseXMLAsn
	isSet bool
}

func (v NullableASNResponseXMLAsn) Get() *ASNResponseXMLAsn {
	return v.value
}

func (v *NullableASNResponseXMLAsn) Set(val *ASNResponseXMLAsn) {
	v.value = val
	v.isSet = true
}

func (v NullableASNResponseXMLAsn) IsSet() bool {
	return v.isSet
}

func (v *NullableASNResponseXMLAsn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableASNResponseXMLAsn(val *ASNResponseXMLAsn) *NullableASNResponseXMLAsn {
	return &NullableASNResponseXMLAsn{value: val, isSet: true}
}

func (v NullableASNResponseXMLAsn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableASNResponseXMLAsn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


