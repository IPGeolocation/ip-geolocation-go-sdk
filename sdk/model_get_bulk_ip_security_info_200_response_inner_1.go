/*
IPGeolocation.io - IP intelligence products

Ipgeolocation provides a set of APIs to make ip based decisions.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipgeolocationsdk

import (
	"encoding/json"
	"fmt"
)

// GetBulkIpSecurityInfo200ResponseInner1 - struct for GetBulkIpSecurityInfo200ResponseInner1
type GetBulkIpSecurityInfo200ResponseInner1 struct {
	ErrorXMLResponseArray *ErrorXMLResponseArray
	SecurityAPIXMLResponseArray *SecurityAPIXMLResponseArray
}

// ErrorXMLResponseArrayAsGetBulkIpSecurityInfo200ResponseInner1 is a convenience function that returns ErrorXMLResponseArray wrapped in GetBulkIpSecurityInfo200ResponseInner1
func ErrorXMLResponseArrayAsGetBulkIpSecurityInfo200ResponseInner1(v *ErrorXMLResponseArray) GetBulkIpSecurityInfo200ResponseInner1 {
	return GetBulkIpSecurityInfo200ResponseInner1{
		ErrorXMLResponseArray: v,
	}
}

// SecurityAPIXMLResponseArrayAsGetBulkIpSecurityInfo200ResponseInner1 is a convenience function that returns SecurityAPIXMLResponseArray wrapped in GetBulkIpSecurityInfo200ResponseInner1
func SecurityAPIXMLResponseArrayAsGetBulkIpSecurityInfo200ResponseInner1(v *SecurityAPIXMLResponseArray) GetBulkIpSecurityInfo200ResponseInner1 {
	return GetBulkIpSecurityInfo200ResponseInner1{
		SecurityAPIXMLResponseArray: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GetBulkIpSecurityInfo200ResponseInner1) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ErrorXMLResponseArray
	err = json.Unmarshal(data, &dst.ErrorXMLResponseArray)
	if err == nil {
		jsonErrorXMLResponseArray, _ := json.Marshal(dst.ErrorXMLResponseArray)
		if string(jsonErrorXMLResponseArray) == "{}" { // empty struct
			dst.ErrorXMLResponseArray = nil
		} else {
			match++
		}
	} else {
		dst.ErrorXMLResponseArray = nil
	}

	// try to unmarshal data into SecurityAPIXMLResponseArray
	err = json.Unmarshal(data, &dst.SecurityAPIXMLResponseArray)
	if err == nil {
		jsonSecurityAPIXMLResponseArray, _ := json.Marshal(dst.SecurityAPIXMLResponseArray)
		if string(jsonSecurityAPIXMLResponseArray) == "{}" { // empty struct
			dst.SecurityAPIXMLResponseArray = nil
		} else {
			match++
		}
	} else {
		dst.SecurityAPIXMLResponseArray = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ErrorXMLResponseArray = nil
		dst.SecurityAPIXMLResponseArray = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GetBulkIpSecurityInfo200ResponseInner1)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GetBulkIpSecurityInfo200ResponseInner1)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GetBulkIpSecurityInfo200ResponseInner1) MarshalJSON() ([]byte, error) {
	if src.ErrorXMLResponseArray != nil {
		return json.Marshal(&src.ErrorXMLResponseArray)
	}

	if src.SecurityAPIXMLResponseArray != nil {
		return json.Marshal(&src.SecurityAPIXMLResponseArray)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GetBulkIpSecurityInfo200ResponseInner1) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ErrorXMLResponseArray != nil {
		return obj.ErrorXMLResponseArray
	}

	if obj.SecurityAPIXMLResponseArray != nil {
		return obj.SecurityAPIXMLResponseArray
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj GetBulkIpSecurityInfo200ResponseInner1) GetActualInstanceValue() (interface{}) {
	if obj.ErrorXMLResponseArray != nil {
		return *obj.ErrorXMLResponseArray
	}

	if obj.SecurityAPIXMLResponseArray != nil {
		return *obj.SecurityAPIXMLResponseArray
	}

	// all schemas are nil
	return nil
}

type NullableGetBulkIpSecurityInfo200ResponseInner1 struct {
	value *GetBulkIpSecurityInfo200ResponseInner1
	isSet bool
}

func (v NullableGetBulkIpSecurityInfo200ResponseInner1) Get() *GetBulkIpSecurityInfo200ResponseInner1 {
	return v.value
}

func (v *NullableGetBulkIpSecurityInfo200ResponseInner1) Set(val *GetBulkIpSecurityInfo200ResponseInner1) {
	v.value = val
	v.isSet = true
}

func (v NullableGetBulkIpSecurityInfo200ResponseInner1) IsSet() bool {
	return v.isSet
}

func (v *NullableGetBulkIpSecurityInfo200ResponseInner1) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetBulkIpSecurityInfo200ResponseInner1(val *GetBulkIpSecurityInfo200ResponseInner1) *NullableGetBulkIpSecurityInfo200ResponseInner1 {
	return &NullableGetBulkIpSecurityInfo200ResponseInner1{value: val, isSet: true}
}

func (v NullableGetBulkIpSecurityInfo200ResponseInner1) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetBulkIpSecurityInfo200ResponseInner1) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


