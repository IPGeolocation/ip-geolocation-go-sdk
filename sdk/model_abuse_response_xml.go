/*
IPGeolocation.io - IP intelligence products

Ipgeolocation provides a set of APIs to make ip based decisions.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipgeolocationsdk

import (
	"encoding/json"
)

// checks if the AbuseResponseXML type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AbuseResponseXML{}

// AbuseResponseXML struct for AbuseResponseXML
type AbuseResponseXML struct {
	Ip *string `json:"ip,omitempty"`
	Abuse *Abuse `json:"abuse,omitempty"`
}

// NewAbuseResponseXML instantiates a new AbuseResponseXML object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAbuseResponseXML() *AbuseResponseXML {
	this := AbuseResponseXML{}
	return &this
}

// NewAbuseResponseXMLWithDefaults instantiates a new AbuseResponseXML object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAbuseResponseXMLWithDefaults() *AbuseResponseXML {
	this := AbuseResponseXML{}
	return &this
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *AbuseResponseXML) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbuseResponseXML) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *AbuseResponseXML) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *AbuseResponseXML) SetIp(v string) {
	o.Ip = &v
}

// GetAbuse returns the Abuse field value if set, zero value otherwise.
func (o *AbuseResponseXML) GetAbuse() Abuse {
	if o == nil || IsNil(o.Abuse) {
		var ret Abuse
		return ret
	}
	return *o.Abuse
}

// GetAbuseOk returns a tuple with the Abuse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AbuseResponseXML) GetAbuseOk() (*Abuse, bool) {
	if o == nil || IsNil(o.Abuse) {
		return nil, false
	}
	return o.Abuse, true
}

// HasAbuse returns a boolean if a field has been set.
func (o *AbuseResponseXML) HasAbuse() bool {
	if o != nil && !IsNil(o.Abuse) {
		return true
	}

	return false
}

// SetAbuse gets a reference to the given Abuse and assigns it to the Abuse field.
func (o *AbuseResponseXML) SetAbuse(v Abuse) {
	o.Abuse = &v
}

func (o AbuseResponseXML) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AbuseResponseXML) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.Abuse) {
		toSerialize["abuse"] = o.Abuse
	}
	return toSerialize, nil
}

type NullableAbuseResponseXML struct {
	value *AbuseResponseXML
	isSet bool
}

func (v NullableAbuseResponseXML) Get() *AbuseResponseXML {
	return v.value
}

func (v *NullableAbuseResponseXML) Set(val *AbuseResponseXML) {
	v.value = val
	v.isSet = true
}

func (v NullableAbuseResponseXML) IsSet() bool {
	return v.isSet
}

func (v *NullableAbuseResponseXML) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAbuseResponseXML(val *AbuseResponseXML) *NullableAbuseResponseXML {
	return &NullableAbuseResponseXML{value: val, isSet: true}
}

func (v NullableAbuseResponseXML) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAbuseResponseXML) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


