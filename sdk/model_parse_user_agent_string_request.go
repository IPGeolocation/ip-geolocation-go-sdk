/*
IPGeolocation.io - IP intelligence products

Ipgeolocation provides a set of APIs to make ip based decisions.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipgeolocationsdk

import (
	"encoding/json"
)

// checks if the ParseUserAgentStringRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ParseUserAgentStringRequest{}

// ParseUserAgentStringRequest struct for ParseUserAgentStringRequest
type ParseUserAgentStringRequest struct {
	UaString *string `json:"uaString,omitempty"`
}

// NewParseUserAgentStringRequest instantiates a new ParseUserAgentStringRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewParseUserAgentStringRequest() *ParseUserAgentStringRequest {
	this := ParseUserAgentStringRequest{}
	return &this
}

// NewParseUserAgentStringRequestWithDefaults instantiates a new ParseUserAgentStringRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewParseUserAgentStringRequestWithDefaults() *ParseUserAgentStringRequest {
	this := ParseUserAgentStringRequest{}
	return &this
}

// GetUaString returns the UaString field value if set, zero value otherwise.
func (o *ParseUserAgentStringRequest) GetUaString() string {
	if o == nil || IsNil(o.UaString) {
		var ret string
		return ret
	}
	return *o.UaString
}

// GetUaStringOk returns a tuple with the UaString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ParseUserAgentStringRequest) GetUaStringOk() (*string, bool) {
	if o == nil || IsNil(o.UaString) {
		return nil, false
	}
	return o.UaString, true
}

// HasUaString returns a boolean if a field has been set.
func (o *ParseUserAgentStringRequest) HasUaString() bool {
	if o != nil && !IsNil(o.UaString) {
		return true
	}

	return false
}

// SetUaString gets a reference to the given string and assigns it to the UaString field.
func (o *ParseUserAgentStringRequest) SetUaString(v string) {
	o.UaString = &v
}

func (o ParseUserAgentStringRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ParseUserAgentStringRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UaString) {
		toSerialize["uaString"] = o.UaString
	}
	return toSerialize, nil
}

type NullableParseUserAgentStringRequest struct {
	value *ParseUserAgentStringRequest
	isSet bool
}

func (v NullableParseUserAgentStringRequest) Get() *ParseUserAgentStringRequest {
	return v.value
}

func (v *NullableParseUserAgentStringRequest) Set(val *ParseUserAgentStringRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableParseUserAgentStringRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableParseUserAgentStringRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableParseUserAgentStringRequest(val *ParseUserAgentStringRequest) *NullableParseUserAgentStringRequest {
	return &NullableParseUserAgentStringRequest{value: val, isSet: true}
}

func (v NullableParseUserAgentStringRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableParseUserAgentStringRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


