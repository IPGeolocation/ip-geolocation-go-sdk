/*
IPGeolocation.io - IP intelligence products

Ipgeolocation provides a set of APIs to make ip based decisions.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipgeolocationsdk

import (
	"encoding/json"
)

// checks if the AstronomyXMLResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AstronomyXMLResponse{}

// AstronomyXMLResponse struct for AstronomyXMLResponse
type AstronomyXMLResponse struct {
	Ip *string `json:"ip,omitempty"`
	Location *TimezoneLocation `json:"location,omitempty"`
	Astronomy *Astronomy `json:"astronomy,omitempty"`
}

// NewAstronomyXMLResponse instantiates a new AstronomyXMLResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAstronomyXMLResponse() *AstronomyXMLResponse {
	this := AstronomyXMLResponse{}
	return &this
}

// NewAstronomyXMLResponseWithDefaults instantiates a new AstronomyXMLResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAstronomyXMLResponseWithDefaults() *AstronomyXMLResponse {
	this := AstronomyXMLResponse{}
	return &this
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *AstronomyXMLResponse) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AstronomyXMLResponse) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *AstronomyXMLResponse) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *AstronomyXMLResponse) SetIp(v string) {
	o.Ip = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *AstronomyXMLResponse) GetLocation() TimezoneLocation {
	if o == nil || IsNil(o.Location) {
		var ret TimezoneLocation
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AstronomyXMLResponse) GetLocationOk() (*TimezoneLocation, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *AstronomyXMLResponse) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given TimezoneLocation and assigns it to the Location field.
func (o *AstronomyXMLResponse) SetLocation(v TimezoneLocation) {
	o.Location = &v
}

// GetAstronomy returns the Astronomy field value if set, zero value otherwise.
func (o *AstronomyXMLResponse) GetAstronomy() Astronomy {
	if o == nil || IsNil(o.Astronomy) {
		var ret Astronomy
		return ret
	}
	return *o.Astronomy
}

// GetAstronomyOk returns a tuple with the Astronomy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AstronomyXMLResponse) GetAstronomyOk() (*Astronomy, bool) {
	if o == nil || IsNil(o.Astronomy) {
		return nil, false
	}
	return o.Astronomy, true
}

// HasAstronomy returns a boolean if a field has been set.
func (o *AstronomyXMLResponse) HasAstronomy() bool {
	if o != nil && !IsNil(o.Astronomy) {
		return true
	}

	return false
}

// SetAstronomy gets a reference to the given Astronomy and assigns it to the Astronomy field.
func (o *AstronomyXMLResponse) SetAstronomy(v Astronomy) {
	o.Astronomy = &v
}

func (o AstronomyXMLResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AstronomyXMLResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Astronomy) {
		toSerialize["astronomy"] = o.Astronomy
	}
	return toSerialize, nil
}

type NullableAstronomyXMLResponse struct {
	value *AstronomyXMLResponse
	isSet bool
}

func (v NullableAstronomyXMLResponse) Get() *AstronomyXMLResponse {
	return v.value
}

func (v *NullableAstronomyXMLResponse) Set(val *AstronomyXMLResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAstronomyXMLResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAstronomyXMLResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAstronomyXMLResponse(val *AstronomyXMLResponse) *NullableAstronomyXMLResponse {
	return &NullableAstronomyXMLResponse{value: val, isSet: true}
}

func (v NullableAstronomyXMLResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAstronomyXMLResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


