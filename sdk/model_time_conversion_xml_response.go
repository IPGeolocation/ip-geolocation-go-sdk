/*
IPGeolocation.io - IP intelligence products

Ipgeolocation provides a set of APIs to make ip based decisions.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipgeolocationsdk

import (
	"encoding/json"
)

// checks if the TimeConversionXMLResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimeConversionXMLResponse{}

// TimeConversionXMLResponse struct for TimeConversionXMLResponse
type TimeConversionXMLResponse struct {
	OriginalTime *string `json:"original_time,omitempty"`
	ConvertedTime *string `json:"converted_time,omitempty"`
	DiffHour *float32 `json:"diff_hour,omitempty"`
	DiffMin *int32 `json:"diff_min,omitempty"`
}

// NewTimeConversionXMLResponse instantiates a new TimeConversionXMLResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeConversionXMLResponse() *TimeConversionXMLResponse {
	this := TimeConversionXMLResponse{}
	return &this
}

// NewTimeConversionXMLResponseWithDefaults instantiates a new TimeConversionXMLResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeConversionXMLResponseWithDefaults() *TimeConversionXMLResponse {
	this := TimeConversionXMLResponse{}
	return &this
}

// GetOriginalTime returns the OriginalTime field value if set, zero value otherwise.
func (o *TimeConversionXMLResponse) GetOriginalTime() string {
	if o == nil || IsNil(o.OriginalTime) {
		var ret string
		return ret
	}
	return *o.OriginalTime
}

// GetOriginalTimeOk returns a tuple with the OriginalTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeConversionXMLResponse) GetOriginalTimeOk() (*string, bool) {
	if o == nil || IsNil(o.OriginalTime) {
		return nil, false
	}
	return o.OriginalTime, true
}

// HasOriginalTime returns a boolean if a field has been set.
func (o *TimeConversionXMLResponse) HasOriginalTime() bool {
	if o != nil && !IsNil(o.OriginalTime) {
		return true
	}

	return false
}

// SetOriginalTime gets a reference to the given string and assigns it to the OriginalTime field.
func (o *TimeConversionXMLResponse) SetOriginalTime(v string) {
	o.OriginalTime = &v
}

// GetConvertedTime returns the ConvertedTime field value if set, zero value otherwise.
func (o *TimeConversionXMLResponse) GetConvertedTime() string {
	if o == nil || IsNil(o.ConvertedTime) {
		var ret string
		return ret
	}
	return *o.ConvertedTime
}

// GetConvertedTimeOk returns a tuple with the ConvertedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeConversionXMLResponse) GetConvertedTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ConvertedTime) {
		return nil, false
	}
	return o.ConvertedTime, true
}

// HasConvertedTime returns a boolean if a field has been set.
func (o *TimeConversionXMLResponse) HasConvertedTime() bool {
	if o != nil && !IsNil(o.ConvertedTime) {
		return true
	}

	return false
}

// SetConvertedTime gets a reference to the given string and assigns it to the ConvertedTime field.
func (o *TimeConversionXMLResponse) SetConvertedTime(v string) {
	o.ConvertedTime = &v
}

// GetDiffHour returns the DiffHour field value if set, zero value otherwise.
func (o *TimeConversionXMLResponse) GetDiffHour() float32 {
	if o == nil || IsNil(o.DiffHour) {
		var ret float32
		return ret
	}
	return *o.DiffHour
}

// GetDiffHourOk returns a tuple with the DiffHour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeConversionXMLResponse) GetDiffHourOk() (*float32, bool) {
	if o == nil || IsNil(o.DiffHour) {
		return nil, false
	}
	return o.DiffHour, true
}

// HasDiffHour returns a boolean if a field has been set.
func (o *TimeConversionXMLResponse) HasDiffHour() bool {
	if o != nil && !IsNil(o.DiffHour) {
		return true
	}

	return false
}

// SetDiffHour gets a reference to the given float32 and assigns it to the DiffHour field.
func (o *TimeConversionXMLResponse) SetDiffHour(v float32) {
	o.DiffHour = &v
}

// GetDiffMin returns the DiffMin field value if set, zero value otherwise.
func (o *TimeConversionXMLResponse) GetDiffMin() int32 {
	if o == nil || IsNil(o.DiffMin) {
		var ret int32
		return ret
	}
	return *o.DiffMin
}

// GetDiffMinOk returns a tuple with the DiffMin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeConversionXMLResponse) GetDiffMinOk() (*int32, bool) {
	if o == nil || IsNil(o.DiffMin) {
		return nil, false
	}
	return o.DiffMin, true
}

// HasDiffMin returns a boolean if a field has been set.
func (o *TimeConversionXMLResponse) HasDiffMin() bool {
	if o != nil && !IsNil(o.DiffMin) {
		return true
	}

	return false
}

// SetDiffMin gets a reference to the given int32 and assigns it to the DiffMin field.
func (o *TimeConversionXMLResponse) SetDiffMin(v int32) {
	o.DiffMin = &v
}

func (o TimeConversionXMLResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimeConversionXMLResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OriginalTime) {
		toSerialize["original_time"] = o.OriginalTime
	}
	if !IsNil(o.ConvertedTime) {
		toSerialize["converted_time"] = o.ConvertedTime
	}
	if !IsNil(o.DiffHour) {
		toSerialize["diff_hour"] = o.DiffHour
	}
	if !IsNil(o.DiffMin) {
		toSerialize["diff_min"] = o.DiffMin
	}
	return toSerialize, nil
}

type NullableTimeConversionXMLResponse struct {
	value *TimeConversionXMLResponse
	isSet bool
}

func (v NullableTimeConversionXMLResponse) Get() *TimeConversionXMLResponse {
	return v.value
}

func (v *NullableTimeConversionXMLResponse) Set(val *TimeConversionXMLResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeConversionXMLResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeConversionXMLResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeConversionXMLResponse(val *TimeConversionXMLResponse) *NullableTimeConversionXMLResponse {
	return &NullableTimeConversionXMLResponse{value: val, isSet: true}
}

func (v NullableTimeConversionXMLResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeConversionXMLResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


