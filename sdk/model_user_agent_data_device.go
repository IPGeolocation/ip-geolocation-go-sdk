/*
IPGeolocation.io - IP intelligence products

Ipgeolocation provides a set of APIs to make ip based decisions.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipgeolocationsdk

import (
	"encoding/json"
)

// checks if the UserAgentDataDevice type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserAgentDataDevice{}

// UserAgentDataDevice struct for UserAgentDataDevice
type UserAgentDataDevice struct {
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
	Brand *string `json:"brand,omitempty"`
	Cpu *string `json:"cpu,omitempty"`
}

// NewUserAgentDataDevice instantiates a new UserAgentDataDevice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserAgentDataDevice() *UserAgentDataDevice {
	this := UserAgentDataDevice{}
	return &this
}

// NewUserAgentDataDeviceWithDefaults instantiates a new UserAgentDataDevice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserAgentDataDeviceWithDefaults() *UserAgentDataDevice {
	this := UserAgentDataDevice{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UserAgentDataDevice) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAgentDataDevice) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UserAgentDataDevice) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UserAgentDataDevice) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UserAgentDataDevice) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAgentDataDevice) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UserAgentDataDevice) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UserAgentDataDevice) SetType(v string) {
	o.Type = &v
}

// GetBrand returns the Brand field value if set, zero value otherwise.
func (o *UserAgentDataDevice) GetBrand() string {
	if o == nil || IsNil(o.Brand) {
		var ret string
		return ret
	}
	return *o.Brand
}

// GetBrandOk returns a tuple with the Brand field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAgentDataDevice) GetBrandOk() (*string, bool) {
	if o == nil || IsNil(o.Brand) {
		return nil, false
	}
	return o.Brand, true
}

// HasBrand returns a boolean if a field has been set.
func (o *UserAgentDataDevice) HasBrand() bool {
	if o != nil && !IsNil(o.Brand) {
		return true
	}

	return false
}

// SetBrand gets a reference to the given string and assigns it to the Brand field.
func (o *UserAgentDataDevice) SetBrand(v string) {
	o.Brand = &v
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *UserAgentDataDevice) GetCpu() string {
	if o == nil || IsNil(o.Cpu) {
		var ret string
		return ret
	}
	return *o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAgentDataDevice) GetCpuOk() (*string, bool) {
	if o == nil || IsNil(o.Cpu) {
		return nil, false
	}
	return o.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *UserAgentDataDevice) HasCpu() bool {
	if o != nil && !IsNil(o.Cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given string and assigns it to the Cpu field.
func (o *UserAgentDataDevice) SetCpu(v string) {
	o.Cpu = &v
}

func (o UserAgentDataDevice) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserAgentDataDevice) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Brand) {
		toSerialize["brand"] = o.Brand
	}
	if !IsNil(o.Cpu) {
		toSerialize["cpu"] = o.Cpu
	}
	return toSerialize, nil
}

type NullableUserAgentDataDevice struct {
	value *UserAgentDataDevice
	isSet bool
}

func (v NullableUserAgentDataDevice) Get() *UserAgentDataDevice {
	return v.value
}

func (v *NullableUserAgentDataDevice) Set(val *UserAgentDataDevice) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAgentDataDevice) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAgentDataDevice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAgentDataDevice(val *UserAgentDataDevice) *NullableUserAgentDataDevice {
	return &NullableUserAgentDataDevice{value: val, isSet: true}
}

func (v NullableUserAgentDataDevice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAgentDataDevice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


