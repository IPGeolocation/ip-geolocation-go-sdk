/*
IPGeolocation.io - IP intelligence products

Ipgeolocation provides a set of APIs to make ip based decisions.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipgeolocationsdk

import (
	"encoding/json"
)

// checks if the TimeZone type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimeZone{}

// TimeZone struct for TimeZone
type TimeZone struct {
	Name *string `json:"name,omitempty"`
	Offset *int32 `json:"offset,omitempty"`
	OffsetWithDst *int32 `json:"offset_with_dst,omitempty"`
	CurrentTime *string `json:"current_time,omitempty"`
	CurrentTimeUnix *float32 `json:"current_time_unix,omitempty"`
	IsDst *bool `json:"is_dst,omitempty"`
	DstSavings *int32 `json:"dst_savings,omitempty"`
	DstExists *bool `json:"dst_exists,omitempty"`
	DstStart *TimeZoneDstStart `json:"dst_start,omitempty"`
	DstEnd *TimeZoneDstEnd `json:"dst_end,omitempty"`
}

// NewTimeZone instantiates a new TimeZone object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeZone() *TimeZone {
	this := TimeZone{}
	return &this
}

// NewTimeZoneWithDefaults instantiates a new TimeZone object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeZoneWithDefaults() *TimeZone {
	this := TimeZone{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *TimeZone) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeZone) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *TimeZone) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *TimeZone) SetName(v string) {
	o.Name = &v
}

// GetOffset returns the Offset field value if set, zero value otherwise.
func (o *TimeZone) GetOffset() int32 {
	if o == nil || IsNil(o.Offset) {
		var ret int32
		return ret
	}
	return *o.Offset
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeZone) GetOffsetOk() (*int32, bool) {
	if o == nil || IsNil(o.Offset) {
		return nil, false
	}
	return o.Offset, true
}

// HasOffset returns a boolean if a field has been set.
func (o *TimeZone) HasOffset() bool {
	if o != nil && !IsNil(o.Offset) {
		return true
	}

	return false
}

// SetOffset gets a reference to the given int32 and assigns it to the Offset field.
func (o *TimeZone) SetOffset(v int32) {
	o.Offset = &v
}

// GetOffsetWithDst returns the OffsetWithDst field value if set, zero value otherwise.
func (o *TimeZone) GetOffsetWithDst() int32 {
	if o == nil || IsNil(o.OffsetWithDst) {
		var ret int32
		return ret
	}
	return *o.OffsetWithDst
}

// GetOffsetWithDstOk returns a tuple with the OffsetWithDst field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeZone) GetOffsetWithDstOk() (*int32, bool) {
	if o == nil || IsNil(o.OffsetWithDst) {
		return nil, false
	}
	return o.OffsetWithDst, true
}

// HasOffsetWithDst returns a boolean if a field has been set.
func (o *TimeZone) HasOffsetWithDst() bool {
	if o != nil && !IsNil(o.OffsetWithDst) {
		return true
	}

	return false
}

// SetOffsetWithDst gets a reference to the given int32 and assigns it to the OffsetWithDst field.
func (o *TimeZone) SetOffsetWithDst(v int32) {
	o.OffsetWithDst = &v
}

// GetCurrentTime returns the CurrentTime field value if set, zero value otherwise.
func (o *TimeZone) GetCurrentTime() string {
	if o == nil || IsNil(o.CurrentTime) {
		var ret string
		return ret
	}
	return *o.CurrentTime
}

// GetCurrentTimeOk returns a tuple with the CurrentTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeZone) GetCurrentTimeOk() (*string, bool) {
	if o == nil || IsNil(o.CurrentTime) {
		return nil, false
	}
	return o.CurrentTime, true
}

// HasCurrentTime returns a boolean if a field has been set.
func (o *TimeZone) HasCurrentTime() bool {
	if o != nil && !IsNil(o.CurrentTime) {
		return true
	}

	return false
}

// SetCurrentTime gets a reference to the given string and assigns it to the CurrentTime field.
func (o *TimeZone) SetCurrentTime(v string) {
	o.CurrentTime = &v
}

// GetCurrentTimeUnix returns the CurrentTimeUnix field value if set, zero value otherwise.
func (o *TimeZone) GetCurrentTimeUnix() float32 {
	if o == nil || IsNil(o.CurrentTimeUnix) {
		var ret float32
		return ret
	}
	return *o.CurrentTimeUnix
}

// GetCurrentTimeUnixOk returns a tuple with the CurrentTimeUnix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeZone) GetCurrentTimeUnixOk() (*float32, bool) {
	if o == nil || IsNil(o.CurrentTimeUnix) {
		return nil, false
	}
	return o.CurrentTimeUnix, true
}

// HasCurrentTimeUnix returns a boolean if a field has been set.
func (o *TimeZone) HasCurrentTimeUnix() bool {
	if o != nil && !IsNil(o.CurrentTimeUnix) {
		return true
	}

	return false
}

// SetCurrentTimeUnix gets a reference to the given float32 and assigns it to the CurrentTimeUnix field.
func (o *TimeZone) SetCurrentTimeUnix(v float32) {
	o.CurrentTimeUnix = &v
}

// GetIsDst returns the IsDst field value if set, zero value otherwise.
func (o *TimeZone) GetIsDst() bool {
	if o == nil || IsNil(o.IsDst) {
		var ret bool
		return ret
	}
	return *o.IsDst
}

// GetIsDstOk returns a tuple with the IsDst field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeZone) GetIsDstOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDst) {
		return nil, false
	}
	return o.IsDst, true
}

// HasIsDst returns a boolean if a field has been set.
func (o *TimeZone) HasIsDst() bool {
	if o != nil && !IsNil(o.IsDst) {
		return true
	}

	return false
}

// SetIsDst gets a reference to the given bool and assigns it to the IsDst field.
func (o *TimeZone) SetIsDst(v bool) {
	o.IsDst = &v
}

// GetDstSavings returns the DstSavings field value if set, zero value otherwise.
func (o *TimeZone) GetDstSavings() int32 {
	if o == nil || IsNil(o.DstSavings) {
		var ret int32
		return ret
	}
	return *o.DstSavings
}

// GetDstSavingsOk returns a tuple with the DstSavings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeZone) GetDstSavingsOk() (*int32, bool) {
	if o == nil || IsNil(o.DstSavings) {
		return nil, false
	}
	return o.DstSavings, true
}

// HasDstSavings returns a boolean if a field has been set.
func (o *TimeZone) HasDstSavings() bool {
	if o != nil && !IsNil(o.DstSavings) {
		return true
	}

	return false
}

// SetDstSavings gets a reference to the given int32 and assigns it to the DstSavings field.
func (o *TimeZone) SetDstSavings(v int32) {
	o.DstSavings = &v
}

// GetDstExists returns the DstExists field value if set, zero value otherwise.
func (o *TimeZone) GetDstExists() bool {
	if o == nil || IsNil(o.DstExists) {
		var ret bool
		return ret
	}
	return *o.DstExists
}

// GetDstExistsOk returns a tuple with the DstExists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeZone) GetDstExistsOk() (*bool, bool) {
	if o == nil || IsNil(o.DstExists) {
		return nil, false
	}
	return o.DstExists, true
}

// HasDstExists returns a boolean if a field has been set.
func (o *TimeZone) HasDstExists() bool {
	if o != nil && !IsNil(o.DstExists) {
		return true
	}

	return false
}

// SetDstExists gets a reference to the given bool and assigns it to the DstExists field.
func (o *TimeZone) SetDstExists(v bool) {
	o.DstExists = &v
}

// GetDstStart returns the DstStart field value if set, zero value otherwise.
func (o *TimeZone) GetDstStart() TimeZoneDstStart {
	if o == nil || IsNil(o.DstStart) {
		var ret TimeZoneDstStart
		return ret
	}
	return *o.DstStart
}

// GetDstStartOk returns a tuple with the DstStart field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeZone) GetDstStartOk() (*TimeZoneDstStart, bool) {
	if o == nil || IsNil(o.DstStart) {
		return nil, false
	}
	return o.DstStart, true
}

// HasDstStart returns a boolean if a field has been set.
func (o *TimeZone) HasDstStart() bool {
	if o != nil && !IsNil(o.DstStart) {
		return true
	}

	return false
}

// SetDstStart gets a reference to the given TimeZoneDstStart and assigns it to the DstStart field.
func (o *TimeZone) SetDstStart(v TimeZoneDstStart) {
	o.DstStart = &v
}

// GetDstEnd returns the DstEnd field value if set, zero value otherwise.
func (o *TimeZone) GetDstEnd() TimeZoneDstEnd {
	if o == nil || IsNil(o.DstEnd) {
		var ret TimeZoneDstEnd
		return ret
	}
	return *o.DstEnd
}

// GetDstEndOk returns a tuple with the DstEnd field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeZone) GetDstEndOk() (*TimeZoneDstEnd, bool) {
	if o == nil || IsNil(o.DstEnd) {
		return nil, false
	}
	return o.DstEnd, true
}

// HasDstEnd returns a boolean if a field has been set.
func (o *TimeZone) HasDstEnd() bool {
	if o != nil && !IsNil(o.DstEnd) {
		return true
	}

	return false
}

// SetDstEnd gets a reference to the given TimeZoneDstEnd and assigns it to the DstEnd field.
func (o *TimeZone) SetDstEnd(v TimeZoneDstEnd) {
	o.DstEnd = &v
}

func (o TimeZone) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimeZone) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Offset) {
		toSerialize["offset"] = o.Offset
	}
	if !IsNil(o.OffsetWithDst) {
		toSerialize["offset_with_dst"] = o.OffsetWithDst
	}
	if !IsNil(o.CurrentTime) {
		toSerialize["current_time"] = o.CurrentTime
	}
	if !IsNil(o.CurrentTimeUnix) {
		toSerialize["current_time_unix"] = o.CurrentTimeUnix
	}
	if !IsNil(o.IsDst) {
		toSerialize["is_dst"] = o.IsDst
	}
	if !IsNil(o.DstSavings) {
		toSerialize["dst_savings"] = o.DstSavings
	}
	if !IsNil(o.DstExists) {
		toSerialize["dst_exists"] = o.DstExists
	}
	if !IsNil(o.DstStart) {
		toSerialize["dst_start"] = o.DstStart
	}
	if !IsNil(o.DstEnd) {
		toSerialize["dst_end"] = o.DstEnd
	}
	return toSerialize, nil
}

type NullableTimeZone struct {
	value *TimeZone
	isSet bool
}

func (v NullableTimeZone) Get() *TimeZone {
	return v.value
}

func (v *NullableTimeZone) Set(val *TimeZone) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeZone) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeZone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeZone(val *TimeZone) *NullableTimeZone {
	return &NullableTimeZone{value: val, isSet: true}
}

func (v NullableTimeZone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeZone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


