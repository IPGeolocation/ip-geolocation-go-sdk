/*
IPGeolocation.io - IP intelligence products

Ipgeolocation provides a set of APIs to make ip based decisions.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ipgeolocationsdk

import (
	"encoding/json"
)

// checks if the NetworkMinimalAsn type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkMinimalAsn{}

// NetworkMinimalAsn struct for NetworkMinimalAsn
type NetworkMinimalAsn struct {
	AsNumber *string `json:"as_number,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Country *string `json:"country,omitempty"`
}

// NewNetworkMinimalAsn instantiates a new NetworkMinimalAsn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkMinimalAsn() *NetworkMinimalAsn {
	this := NetworkMinimalAsn{}
	return &this
}

// NewNetworkMinimalAsnWithDefaults instantiates a new NetworkMinimalAsn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkMinimalAsnWithDefaults() *NetworkMinimalAsn {
	this := NetworkMinimalAsn{}
	return &this
}

// GetAsNumber returns the AsNumber field value if set, zero value otherwise.
func (o *NetworkMinimalAsn) GetAsNumber() string {
	if o == nil || IsNil(o.AsNumber) {
		var ret string
		return ret
	}
	return *o.AsNumber
}

// GetAsNumberOk returns a tuple with the AsNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkMinimalAsn) GetAsNumberOk() (*string, bool) {
	if o == nil || IsNil(o.AsNumber) {
		return nil, false
	}
	return o.AsNumber, true
}

// HasAsNumber returns a boolean if a field has been set.
func (o *NetworkMinimalAsn) HasAsNumber() bool {
	if o != nil && !IsNil(o.AsNumber) {
		return true
	}

	return false
}

// SetAsNumber gets a reference to the given string and assigns it to the AsNumber field.
func (o *NetworkMinimalAsn) SetAsNumber(v string) {
	o.AsNumber = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *NetworkMinimalAsn) GetOrganization() string {
	if o == nil || IsNil(o.Organization) {
		var ret string
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkMinimalAsn) GetOrganizationOk() (*string, bool) {
	if o == nil || IsNil(o.Organization) {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *NetworkMinimalAsn) HasOrganization() bool {
	if o != nil && !IsNil(o.Organization) {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given string and assigns it to the Organization field.
func (o *NetworkMinimalAsn) SetOrganization(v string) {
	o.Organization = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *NetworkMinimalAsn) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkMinimalAsn) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *NetworkMinimalAsn) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *NetworkMinimalAsn) SetCountry(v string) {
	o.Country = &v
}

func (o NetworkMinimalAsn) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkMinimalAsn) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AsNumber) {
		toSerialize["as_number"] = o.AsNumber
	}
	if !IsNil(o.Organization) {
		toSerialize["organization"] = o.Organization
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	return toSerialize, nil
}

type NullableNetworkMinimalAsn struct {
	value *NetworkMinimalAsn
	isSet bool
}

func (v NullableNetworkMinimalAsn) Get() *NetworkMinimalAsn {
	return v.value
}

func (v *NullableNetworkMinimalAsn) Set(val *NetworkMinimalAsn) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkMinimalAsn) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkMinimalAsn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkMinimalAsn(val *NetworkMinimalAsn) *NullableNetworkMinimalAsn {
	return &NullableNetworkMinimalAsn{value: val, isSet: true}
}

func (v NullableNetworkMinimalAsn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkMinimalAsn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


